
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isModeratorOrAdmin() {
      // Check if the user has an admin or moderator role document.
      // This is secure as a user can only read their OWN role document.
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }
    
    function isAdmin() {
      return isModeratorOrAdmin() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin';
    }

    function isCircleMember(circleId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
    }
    
    function isCircleAdmin(circleId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid))
        && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role == 'Admin';
    }

    function isCircleAdminOrInfluencer(circleId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid))
        && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role in ['Admin', 'Influencer'];
    }


    // User Profiles: Users can read all profiles but only write to their own. Admins can write to any.
    match /Users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isModeratorOrAdmin();
      allow delete: if isAdmin();
    }

    // Admin Roles: Defines who has special roles.
    match /admin_users/{userId} {
      // A user can read their own role document. This breaks the circular dependency for helper functions.
      allow read: if request.auth.uid == userId;
      // Only admins can create, update, or delete roles.
      allow write: if isAdmin();
    }
    
    // Word Collections
    match /Words/{wordId} {
      allow read: if isSignedIn();
      allow create, update: if isModeratorOrAdmin();
      allow delete: if isAdmin();
    }
    
    match /RejectedWords/{wordId} {
      allow read: if isModeratorOrAdmin();
      allow create, update: if isModeratorOrAdmin();
      allow delete: if isAdmin();
    }

    match /WordSubmissionsQueue/{submissionId} {
      allow read: if isModeratorOrAdmin();
      allow create: if isSignedIn();
      allow write: if isModeratorOrAdmin();
    }
    
    // Word Transfers
    match /WordTransfers/{transferId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.senderUserId || request.auth.uid == resource.data.recipientUserId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.senderUserId;
      // Recipient can only update the status if it's pending.
      allow update: if isSignedIn() && request.auth.uid == resource.data.recipientUserId && resource.data.status == 'PendingRecipient';
      allow delete: if false; // Transfers shouldn't be deleted, but expired.
    }

    // Daily Puzzles: All signed-in users can read, only admins/mods can write
    match /DailyPuzzles/{puzzleId} {
      allow read: if isSignedIn();
      allow write: if isModeratorOrAdmin();
    }

    // System-wide configuration, only full admins can change
    match /SystemConfiguration/{docId} {
      allow read: if isSignedIn();
      allow write: if isModeratorOrAdmin();
    }

    // Admins and moderators can create logs, but no one can modify/delete them
    match /AdminAuditLogs/{logId} {
      allow read: if isModeratorOrAdmin();
      allow create: if isModeratorOrAdmin();
      allow update, delete: if false;
    }
    
    // Circles
    match /Circles/{circleId} {
      allow read: if resource.data.isPublic || isCircleMember(circleId);
      allow create: if isSignedIn();
      allow update: if isCircleAdmin(circleId) || isModeratorOrAdmin();
      allow delete: if isCircleAdmin(circleId) || isAdmin();
    }
    
    match /CircleMembers/{memberId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isCircleAdmin(resource.data.circleId) || isOwner(resource.data.userId); // User can update their own role if needed later
      allow delete: if isOwner(resource.data.userId) || isCircleAdmin(resource.data.circleId);
    }
    
    match /CircleInvites/{inviteId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.inviterUserId || request.auth.uid == resource.data.inviteeUserId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.inviterUserId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.inviteeUserId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.inviterUserId;
    }
    
    // Circle Score collections
    match /CircleDailyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow write: if isSignedIn(); // Allow server-side updates
    }
    match /CircleWeeklyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow write: if false; // Should only be updated by a trusted server/function
    }
    match /CircleMonthlyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow write: if false; // Should only be updated by a trusted server/function
    }

    // Notifications: users can only manage their own
    match /Notifications/{notificationId} {
      allow read, update, delete: if isSignedIn() && isOwner(resource.data.userId);
      // Create is handled by server-side actions, but we can lock it down.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
    }

    // User Suggestions: any user can create, only admins can read/write
    match /UserSuggestions/{suggestionId} {
        allow create: if isSignedIn();
        allow read, write: if isModeratorOrAdmin();
    }

    // Changelog: everyone can read, only admins can write
    match /ChangelogEntries/{entryId} {
        allow read: true;
        allow write: if isModeratorOrAdmin();
    }

    // Mail collection for Trigger Email extension. Lock it down.
    match /mail/{docId} {
      allow read, update, delete: if false;
      allow create: if isSignedIn() || isModeratorOrAdmin(); // Allow server-side actions to create emails
    }
  }
}
