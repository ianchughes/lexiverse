rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isUserAuthenticated() && exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin';
    }

    function isModeratorOrAdmin() {
      return isUserAuthenticated() && exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }
    
    function isCircleMember(circleId) {
      // Check if the member document exists for the given circle and the authenticated user.
      return isUserAuthenticated() && exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
    }

    function isCircleAdmin(circleId) {
      // Check if the user is a member and their role is 'Admin'.
      return isCircleMember(circleId) && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role == 'Admin';
    }

    function isCircleAdminOrInfluencer(circleId) {
      // Check if the user is a member and their role is 'Admin' or 'Influencer'.
       return isCircleMember(circleId) && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role in ['Admin', 'Influencer'];
    }


    // --- Collection Rules ---

    // Users can read/write their own profile, admins can read/write any.
    match /Users/{userId} {
      allow read: if isUserAuthenticated() && (isOwner(userId) || isModeratorOrAdmin());
      allow create: if isUserAuthenticated() && isOwner(userId);
      allow update: if isUserAuthenticated() && isOwner(userId);
      allow delete: if isModeratorOrAdmin();
    }
    
    // Admins/Mods can read/write roles, but users can only read their own role.
    match /admin_users/{userId} {
      allow get: if isUserAuthenticated() && isOwner(userId);
      allow list, write: if isAdmin();
    }

    // DailyPuzzles: Publicly readable for game client. Writable only by admins.
    match /DailyPuzzles/{puzzleId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Words: Publicly readable. Writable only by server functions (via admin credentials).
    match /Words/{wordId} {
      allow read: if true;
      allow create, update: if isModeratorOrAdmin();
      allow delete: if isAdmin();
    }
    
    // WordSubmissionsQueue: Writable by authenticated users, readable/deletable by admins.
    match /WordSubmissionsQueue/{submissionId} {
        allow read, delete: if isModeratorOrAdmin();
        allow create: if isUserAuthenticated() && isOwner(request.resource.data.submittedByUID);
    }

    // RejectedWords: Publicly readable to prevent re-submission. Writable only by admins.
    match /RejectedWords/{wordId} {
      allow read: if true;
      allow write: if isModeratorOrAdmin();
    }

    // Circles: Public circles are listable. All circles readable by members. Writable by creator.
    match /Circles/{circleId} {
      allow get: if resource.data.isPublic == true || isCircleMember(circleId) || isModeratorOrAdmin();
      allow list: if resource.data.isPublic == true; // Note: list queries need to reflect this with a where clause.
      allow create: if isUserAuthenticated();
      allow update: if isCircleAdmin(circleId) || isAdmin();
      allow delete: if isCircleAdmin(circleId) || isAdmin();
    }

    // CircleMembers: Members can read their own membership. Writable by Circle Admin.
    match /CircleMembers/{memberId} {
      allow get: if isCircleMember(resource.data.circleId) || isModeratorOrAdmin();
      allow list: if isCircleMember(resource.data.circleId) || isModeratorOrAdmin();
      allow create: if isUserAuthenticated(); // Join action is more complex, handled in transactions.
      allow update: if isCircleAdmin(request.resource.data.circleId) || isAdmin();
      allow delete: if isOwner(request.resource.data.userId) || isCircleAdmin(request.resource.data.circleId) || isAdmin();
    }
    
    // CircleInvites:
    match /CircleInvites/{inviteId} {
      allow get: if isUserAuthenticated() && (isOwner(resource.data.inviteeUserId) || isOwner(resource.data.inviterUserId) || isCircleAdmin(resource.data.circleId) || isModeratorOrAdmin());
      allow list: if isUserAuthenticated() && (isCircleAdmin(resource.data.circleId) || isModeratorOrAdmin());
      allow create: if isCircleAdminOrInfluencer(request.resource.data.circleId);
      allow update: if isUserAuthenticated() && isOwner(request.resource.data.inviteeUserId);
      allow delete: if isCircleAdmin(resource.data.circleId) || isModeratorOrAdmin();
    }
    
    // Circle Scores: Readable by members, writable by anyone (server will handle updates)
    match /CircleDailyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId) || isModeratorOrAdmin();
        allow write: if isUserAuthenticated();
    }
    match /CircleWeeklyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId) || isModeratorOrAdmin();
        allow write: if isUserAuthenticated();
    }
    match /CircleMonthlyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId) || isModeratorOrAdmin();
        allow write: if isUserAuthenticated();
    }
    
    // Notifications: Readable/Writable only by the owner.
    match /Notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // WordTransfers: Readable by involved parties, writable by owner during creation/cancellation.
    match /WordTransfers/{transferId} {
      allow read: if isUserAuthenticated() && (isOwner(resource.data.senderUserId) || isOwner(resource.data.recipientUserId));
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.senderUserId);
      allow update: if isUserAuthenticated() && isOwner(request.resource.data.recipientUserId) && request.resource.data.status != resource.data.status && resource.data.status == 'PendingRecipient';
      allow list, delete: if false; // Should be handled by admin functions if needed
    }
    
    // Changelog: Publicly readable, admin-only writable.
    match /ChangelogEntries/{entryId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // UserSuggestions: Readable by admin/mod, writable by any authenticated user.
    match /UserSuggestions/{suggestionId} {
        allow read: if isModeratorOrAdmin();
        allow create: if isUserAuthenticated();
        allow update: if isModeratorOrAdmin();
    }

    // AdminAuditLogs: Only admins can read. Only server (via admin) can create. No updates/deletes.
    match /AdminAuditLogs/{logId} {
        allow read, list: if isModeratorOrAdmin();
        allow create: if isModeratorOrAdmin();
        allow update, delete: if false;
    }

    // Mail collection for Trigger Email extension
    match /mail/{docId} {
      allow create: if isUserAuthenticated();
      allow read, list, update, delete: if isModeratorOrAdmin();
    }
    
    // SystemConfiguration: Only readable/writable by admins
    match /SystemConfiguration/{configId} {
        allow read, write: if isModeratorOrAdmin();
    }
  }
}