
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isModeratorOrAdmin() {
      // Use get() to check a user's role in a separate 'admin_users' collection
      // This is more secure as roles are not on the public user profile
      return get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }
    
    function isCircleMember(circleId) {
        return exists(/databases/$(database)/documents/CircleMembers/$(circleId)_$(request.auth.uid));
    }
    
    function isCircleAdmin(circleId) {
        let memberDoc = get(/databases/$(database)/documents/CircleMembers/$(circleId)_$(request.auth.uid));
        return memberDoc.data.role == 'Admin';
    }
    
    function isCircleAdminOrInfluencer(circleId) {
        let memberDoc = get(/databases/$(database)/documents/CircleMembers/$(circleId)_$(request.auth.uid));
        return memberDoc.data.role in ['Admin', 'Influencer'];
    }

    // User Profiles
    match /Users/{userId} {
      // Anyone can read a user's public profile (for circle member lists, etc.)
      allow read: if request.auth != null;
      // Users can only create and update their own profile
      allow create, update: if request.auth.uid == userId;
      // Only admins can delete users
      allow delete: if isModeratorOrAdmin();
    }
    
    // Admin Roles - Very restricted
    match /admin_users/{userId} {
      // Only admins can read/write admin roles
      allow read, write: if isModeratorOrAdmin();
    }

    // Daily Puzzles - Word of the Day, seeding letters
    match /DailyPuzzles/{puzzleId} {
      // Any authenticated user can read the daily puzzle data to play the game
      allow read: if request.auth != null;
      // Only admins/moderators can create, update, or delete puzzles
      allow write: if isModeratorOrAdmin();
    }

    // Word Submissions Queue - Words submitted by users awaiting moderation
    match /WordSubmissionsQueue/{submissionId} {
      // Users can create their own submissions
      allow create: if request.auth.uid == request.resource.data.submittedByUID;
      // Only admins/moderators can read, update, or delete submissions
      allow read, update, delete: if isModeratorOrAdmin();
    }

    // Master Words Dictionary - The source of truth for all approved words
    match /Words/{wordText} {
      // Any authenticated user can read words from the dictionary
      allow read: if request.auth != null;
      // Only admins can create/update words directly.
      // Users "claim" words via the submission queue, which an admin then approves.
      allow create, update, delete: if isModeratorOrAdmin();
    }

    // Rejected Words List - Words that have been explicitly rejected
    match /RejectedWords/{wordText} {
      // Any authenticated user can read this list to prevent submitting known bad words.
      allow read: if request.auth != null;
      // Only admins can add words to the rejected list.
      allow write: if isModeratorOrAdmin();
    }
    
    // System-wide configuration, e.g., for forced resets
    match /SystemConfiguration/{docId} {
      // Only admins should be able to read or modify system settings
      allow read, write: if isModeratorOrAdmin();
    }
    
    // Circles
    match /Circles/{circleId} {
        // Any authenticated user can read public circles
        // Members can read circles they belong to
        allow read: if request.auth != null && (resource.data.isPublic == true || isCircleMember(circleId));
        // Any authenticated user can create a circle
        allow create: if request.auth != null;
        // Only circle admins can update or delete their circle
        allow update, delete: if isCircleAdmin(circleId);
    }
    
    // Circle Members
    match /CircleMembers/{memberId} {
        // Members of a circle can read the member list of that same circle.
        allow read: if request.auth != null && isCircleMember(resource.data.circleId);
        // Users can join a circle (create their own membership doc) if invited.
        allow create: if request.auth.uid == resource.data.userId;
        // Only circle admins can update roles (not implemented via direct update)
        // Users can leave a circle (delete their own membership doc)
        allow delete: if request.auth.uid == resource.data.userId || isCircleAdmin(resource.data.circleId);
        allow update: if isCircleAdmin(resource.data.circleId);
    }
    
    // Circle Invites
    match /CircleInvites/{inviteId} {
        // Inviter, invitee, or circle admin can read an invite
        allow read: if request.auth != null && (request.auth.uid == resource.data.inviterUserId || request.auth.uid == resource.data.inviteeUserId || isCircleAdmin(resource.data.circleId));
        // Circle admins or influencers can create invites
        allow create: if isCircleAdminOrInfluencer(request.resource.data.circleId);
        // Invitee can update to accept/decline. Admin can update status.
        allow update: if request.auth.uid == resource.data.inviteeUserId || isCircleAdmin(resource.data.circleId);
        // Inviter or circle admin can delete a pending invite
        allow delete: if request.auth.uid == resource.data.inviterUserId || isCircleAdmin(resource.data.circleId);
    }
    
    // Circle Scores
    match /CircleDailyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow write: if request.auth != null; // Allow server actions to write scores
    }
    match /CircleWeeklyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow write: if false; // Only backend functions should aggregate these
    }
    match /CircleMonthlyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow write: if false; // Only backend functions should aggregate these
    }
    
    // App-wide notifications for users
    match /Notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow delete: if false;
    }
    
    // User Suggestions Log
    match /UserSuggestions/{suggestionId} {
      allow create: if request.auth != null; // Any authenticated user can create a suggestion
      allow read, update: if isModeratorOrAdmin(); // Only admins/mods can view and manage
      allow delete: if false; // Don't allow deletion
    }
    
    // Word Transfers
    match /WordTransfers/{transferId} {
        allow read: if request.auth != null && (request.auth.uid == resource.data.senderUserId || request.auth.uid == resource.data.recipientUserId);
        allow create: if request.auth.uid == request.resource.data.senderUserId;
        allow update: if request.auth.uid == resource.data.recipientUserId && resource.data.status == 'PendingRecipient';
        allow delete: if false;
    }
    
    // Changelog
    match /ChangelogEntries/{entryId} {
        allow read: if true; // Everyone can read the changelog
        allow write: if isModeratorOrAdmin(); // Only admins/mods can create/edit/delete
    }

    // Admin Audit Logs
    match /AdminAuditLogs/{logId} {
      // Admins and mods can read all logs
      allow read: if isModeratorOrAdmin();
      // Only admins/mods can create logs via server actions
      allow create: if isModeratorOrAdmin();
      // Nobody can update/delete logs from the client to preserve integrity
      allow update, delete: if false;
    }
    
    // Mail collection for Trigger Email extension
    match /mail/{docId} {
      // Users can create mail docs, which triggers an email.
      // Security is handled by only allowing specific actions (e.g. invites) via server actions.
      allow create: if request.auth != null;
      // Nobody should be able to read or modify emails after they are sent.
      allow read, update, delete: if false;
    }
  }
}
