rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isModeratorOrAdmin() {
      // Check for existence before accessing data to prevent errors on non-existent docs
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role in ['moderator', 'admin'];
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin';
    }

    // Top-level Admin rule for full access
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // --- User Profiles & Roles ---
    match /Users/{userId} {
      allow read: if isOwner(userId);
      // Allow create if the user is creating their own document.
      allow create: if isOwner(userId) && isSignedIn();
      // Allow update only on specific, non-critical fields.
      allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
        'username', 'photoURL', 'lastPlayedDate_GMT', 'wotdStreakCount', 'activeCircleId', 'hasSeenWelcomeInstructions'
      ]);
      // Disallow client-side deletes.
      allow delete: if false;
    }

    match /admin_users/{userId} {
      allow read: if isOwner(userId) || isModeratorOrAdmin();
      allow write: if false; // Should only be managed by Admins via secure functions or console
    }
    
    // --- Game Data ---
    match /DailyPuzzles/{puzzleId} {
      allow read: if isSignedIn();
      allow write: if isModeratorOrAdmin();
    }

    match /Words/{wordId} {
      allow read: if isSignedIn();
      allow write: if isModeratorOrAdmin(); // Admins/Mods approve words
    }
    
    match /RejectedWords/{wordId} {
      allow read: if isSignedIn(); // Allow reading to prevent resubmission
      allow write: if isModeratorOrAdmin();
    }

    // --- Word Submissions ---
    match /WordSubmissionsQueue/{submissionId} {
      // Any signed-in user can create a submission.
      allow create: if isSignedIn();
      // No one can read/update/delete from the client to protect the queue's integrity.
      // This must be handled by admin/moderator roles via server-side functions.
      allow read, update, delete: if false;
    }
    
    // --- System & Logs ---
    match /SystemConfiguration/{docId} {
      allow read: if true; // Public read access for game settings is fine
      allow write: if isModeratorOrAdmin(); 
    }

    match /AdminAuditLogs/{logId} {
      allow create: if isModeratorOrAdmin(); // Server-side function (running as admin/mod) can create logs.
      allow read, update, delete: if false; // Immutable logs
    }
    
    // --- Circles, Members, Invites & Scores ---
    // Helper function to check if the user is a member of a specific circle.
    function isCircleMember(circleId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
    }

    // Helper function to check if the user is an Admin of a specific circle.
    function isCircleAdmin(circleId) {
      let memberPath = /databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid);
      return exists(memberPath) && get(memberPath).data.role == 'Admin';
    }
    
    // Helper function to check if the user is an Admin or Influencer of a specific circle.
    function isCircleAdminOrInfluencer(circleId) {
       let memberPath = /databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid);
       return exists(memberPath) && get(memberPath).data.role in ['Admin', 'Influencer'];
    }

    match /Circles/{circleId} {
      // Read public circles, or any circle you're a member of.
      allow read: if resource.data.isPublic == true || isCircleMember(circleId);
      // Let server actions handle creation, updates, and deletion.
      allow write: if false; 
    }
    
    match /CircleMembers/{memberId} {
      // Read member data if you can read the parent circle.
      allow read: if isCircleMember(resource.data.circleId);
       // Let server actions handle creation/deletion.
      allow write: if false;
    }
    
    match /CircleInvites/{inviteId} {
      // Users can read invites sent to them. Circle admins can also read invites for their circle.
      allow read: if isOwner(resource.data.inviteeUserId) || isCircleAdmin(resource.data.circleId);
      // Allow users to update their own invites (accept/decline), and admins to manage them.
      // Updates/deletes are handled by secure server functions.
      allow write: if false;
    }

    // Scores are updated by server functions, not directly by clients.
    match /CircleDailyScores/{scoreId} { allow read, write: if false; }
    match /CircleWeeklyScores/{scoreId} { allow read, write: if false; }
    match /CircleMonthlyScores/{scoreId} { allow read, write: if false; }
    
    // Notifications can be read/updated only by the recipient user.
    match /Notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.userId);
      allow create, delete: if false; // Created by server actions.
    }
    
    // Word Transfers
    match /WordTransfers/{transferId} {
      // Can be read by sender or recipient.
      allow read: if request.auth.uid == resource.data.senderUserId || request.auth.uid == resource.data.recipientUserId;
      // All transfer logic is handled by secure server functions.
      allow write: if false;
    }
    
    // User Suggestions and Changelog
    match /UserSuggestions/{suggestionId} {
      // Suggestions are write-only for users via a server function. Admins manage them.
      allow read, write: if false; 
    }
    
    match /ChangelogEntries/{entryId} {
      // Changelog is public to read for all signed-in users.
      allow read: if isSignedIn();
      allow write: if false; // Admins manage via server function.
    }

    // Mail collection for Trigger Email extension. Write-only for server functions.
    match /mail/{docId} {
      allow read: if isModeratorOrAdmin(); // Allow admins/mods to read for logging purposes
      allow write: if false; // Only allow server-side writes
    }

  }
}
