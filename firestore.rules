rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isUserAuthenticated() && exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }

    function isModeratorOrAdmin() {
        return isAdmin() && (
            get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin' ||
            get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'moderator'
        );
    }
    
    function isCircleMember(circleId, userId) {
      return isUserAuthenticated() && exists(/databases/$(database)/documents/CircleMembers/$(circleId)_$(userId));
    }
    
    function isCircleAdmin(circleId, userId) {
        return isCircleMember(circleId, userId) && 
               get(/databases/$(database)/documents/CircleMembers/$(circleId)_$(userId)).data.role == 'Admin';
    }

    function isCircleAdminOrInfluencer(circleId, userId) {
        return isCircleMember(circleId, userId) &&
               get(/databases/$(database)/documents/CircleMembers/$(circleId)_$(userId)).data.role in ['Admin', 'Influencer'];
    }

    // --- Collection Rules ---

    // Users: Users can only read/update their own profile. Admins can read any.
    match /Users/{userId} {
      allow read: if isUserAuthenticated() || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      // Delete is handled by a specific admin server action, not direct client delete.
      allow delete: if false; 
    }

    // admin_users: Only admins can read this collection to verify other admins.
    match /admin_users/{userId} {
      allow read: if isAdmin();
      allow write: if false; // Role changes are handled by a server action
    }

    // DailyPuzzles: Any authenticated user can read. Only admins can write.
    match /DailyPuzzles/{puzzleId} {
      allow read: if isUserAuthenticated();
      allow write: if isAdmin();
    }

    // Words (Master Dictionary): Any authenticated user can read. Writes are handled server-side.
    match /Words/{wordId} {
      allow read: if isUserAuthenticated();
      allow write: if false; // All updates via server actions
    }

    // RejectedWords: Publicly readable to prevent re-submission. Writes are server-side.
    match /RejectedWords/{wordId} {
      allow read: if isUserAuthenticated();
      allow write: if false; // All updates via server actions
    }

    // WordSubmissionsQueue: Only the submitter can create. Only admins/mods can write (update/delete). Read is disallowed.
    match /WordSubmissionsQueue/{submissionId} {
      allow read: if false;
      allow create: if isOwner(request.resource.data.submittedByUID);
      allow write: if isModeratorOrAdmin();
    }
    
    // Circles: Authenticated users can read public circles. Members can read private ones they belong to.
    match /Circles/{circleId} {
      allow read: if resource.data.isPublic == true || isCircleMember(circleId, request.auth.uid);
      allow create: if isUserAuthenticated();
      allow update: if isCircleAdmin(circleId, request.auth.uid);
      allow delete: if isCircleAdmin(circleId, request.auth.uid);
    }
    
    // CircleMembers: Members of the same circle can read each other's membership details.
    match /CircleMembers/{memberId} {
        allow read: if isCircleMember(resource.data.circleId, request.auth.uid);
        allow create: if isOwner(request.resource.data.userId); // When creating a circle
        // Updates/Deletes are handled by server actions (leave, remove, role change)
        allow write: if isCircleAdmin(resource.data.circleId, request.auth.uid) || isOwner(resource.data.userId);
    }
    
    // CircleInvites: Users can manage their own invites. Admins can manage circle invites.
    match /CircleInvites/{inviteId} {
        allow read: if isOwner(resource.data.inviterUserId) || isOwner(resource.data.inviteeUserId);
        allow create: if isCircleAdminOrInfluencer(request.resource.data.circleId, request.auth.uid);
        allow update: if isOwner(resource.data.inviteeUserId); // User accepting/declining
        allow delete: if isOwner(resource.data.inviterUserId) || isCircleAdmin(resource.data.circleId, request.auth.uid);
    }
    
    // Circle Scores: Only members of a circle can read its scores.
    match /CircleDailyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId, request.auth.uid);
        allow write: if false; // Updated by server action
    }
    match /CircleWeeklyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId, request.auth.uid);
        allow write: if false; // Updated by server action
    }
    match /CircleMonthlyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId, request.auth.uid);
        allow write: if false; // Updated by server action
    }

    // SystemConfiguration: Only admins can read/write.
    match /SystemConfiguration/{docId} {
      allow read, write: if isAdmin();
    }
    
    // WordTransfers: Users involved can read. Sender creates, recipient updates.
    match /WordTransfers/{transferId} {
        allow read: if isOwner(resource.data.senderUserId) || isOwner(resource.data.recipientUserId);
        allow create: if isOwner(request.resource.data.senderUserId) && get(/databases/$(database)/documents/Words/$(request.resource.data.wordText)).data.originalSubmitterUID == request.auth.uid;
        allow update: if isOwner(resource.data.recipientUserId) && resource.data.status == 'PendingRecipient';
        allow delete: if false; // Transfers expire or are actioned, not deleted.
    }
    
    // Notifications: Only the recipient can read/update their own notifications.
    match /Notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
        allow create: if isOwner(request.resource.data.userId); // For self-generated notifications or server-side actions
        allow delete: if isOwner(resource.data.userId);
    }
    
    // UserSuggestions: Logged-in users can create. Admins can read/update.
    match /UserSuggestions/{suggestionId} {
        allow create: if isUserAuthenticated();
        allow read, update: if isAdmin();
        allow delete: if false;
    }

    // ChangelogEntries: Read-only for all users. Write access for admins.
    match /ChangelogEntries/{entryId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // AdminAuditLogs: Write-only for server-side functions. Readable by admins.
    match /AdminAuditLogs/{logId} {
        allow read: if isAdmin();
        allow write: if false; // Only from server
    }
    
    // mail: Write-only for authenticated users. Triggered by server actions.
    match /mail/{docId} {
      allow read: if isAdmin(); // Allow admins to read mail log
      allow create: if isUserAuthenticated();
    }
  }
}
