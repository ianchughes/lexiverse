
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin(userId) {
      return isUserAuthenticated() && get(/databases/$(database)/documents/admin_users/$(userId)).data.role == 'admin';
    }

    function isAdminOrModerator(userId) {
      return isUserAuthenticated() && get(/databases/$(database)/documents/admin_users/$(userId)).data.role in ['admin', 'moderator'];
    }
    
    function isCircleMember(circleId, userId) {
      return isUserAuthenticated() && exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + userId));
    }
    
    function getCircleMemberRole(circleId, userId) {
      return get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + userId)).data.role;
    }

    // --- Collection Rules ---

    match /Users/{userId} {
      allow create: if isUserAuthenticated() && request.resource.data.uid == request.auth.uid;
      allow read: if isUserAuthenticated();
      // Users can only update specific, non-critical fields on their own profile.
      allow update: if isOwner(userId) && request.resource.data.keys().hasOnly(['username', 'photoURL', 'activeCircleId', 'hasSeenWelcomeInstructions', 'lastPlayedDate_GMT']);
      allow delete: if isAdmin(request.auth.uid);
    }

    match /admin_users/{userId} {
      allow read, write: if isAdmin(request.auth.uid);
    }

    match /Words/{wordId} {
      allow read: true;
      allow create, update: if isAdminOrModerator(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    match /RejectedWords/{wordId} {
      allow read: true;
      allow create, update: if isAdminOrModerator(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    match /WordSubmissionsQueue/{submissionId} {
      allow create: if isUserAuthenticated() && request.resource.data.submittedByUID == request.auth.uid;
      allow read, delete: if isAdminOrModerator(request.auth.uid);
    }

    match /DailyPuzzles/{puzzleId} {
      allow read: if isUserAuthenticated();
      allow write: if isAdmin(request.auth.uid);
    }

    match /Circles/{circleId} {
      allow read: if isUserAuthenticated() && (resource.data.isPublic == true || isCircleMember(circleId, request.auth.uid));
      allow create: if isUserAuthenticated() && request.resource.data.creatorUserID == request.auth.uid;
      allow update: if isUserAuthenticated() && (getCircleMemberRole(circleId, request.auth.uid) == 'Admin');
      allow delete: if isUserAuthenticated() && (getCircleMemberRole(circleId, request.auth.uid) == 'Admin');
    }

    match /CircleMembers/{memberId} {
      allow read: if isUserAuthenticated() && isCircleMember(resource.data.circleId, request.auth.uid);
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isUserAuthenticated() && (getCircleMemberRole(resource.data.circleId, request.auth.uid) == 'Admin');
      allow delete: if isUserAuthenticated() && (isOwner(resource.data.userId) || getCircleMemberRole(resource.data.circleId, request.auth.uid) == 'Admin');
    }

    match /CircleInvites/{inviteId} {
      allow read: if isUserAuthenticated() && (request.auth.uid == resource.data.inviterUserId || request.auth.uid == resource.data.inviteeUserId);
      allow create: if isUserAuthenticated() && request.resource.data.inviterUserId == request.auth.uid;
      allow update: if isUserAuthenticated() && request.auth.uid == resource.data.inviteeUserId;
      allow delete: if isUserAuthenticated() && (request.auth.uid == resource.data.inviterUserId || getCircleMemberRole(resource.data.circleId, request.auth.uid) == 'Admin');
    }

    match /CircleDailyScores/{scoreId} {
      allow read: if isUserAuthenticated() && isCircleMember(resource.data.circleId, request.auth.uid);
      allow write: if false; // Server-side updates only
    }
    match /CircleWeeklyScores/{scoreId} {
      allow read: if isUserAuthenticated() && isCircleMember(resource.data.circleId, request.auth.uid);
      allow write: if false;
    }
    match /CircleMonthlyScores/{scoreId} {
      allow read: if isUserAuthenticated() && isCircleMember(resource.data.circleId, request.auth.uid);
      allow write: if false;
    }

    match /Notifications/{notificationId} {
      allow read, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /UserSuggestions/{suggestionId} {
      allow create: true;
      allow read, update: if request.auth != null && isAdminOrModerator(request.auth.uid);
    }

    match /WordTransfers/{transferId} {
      allow update: if request.auth != null && request.auth.uid == resource.data.recipientUserId;
      allow read: if request.auth != null && (request.auth.uid == resource.data.senderUserId || request.auth.uid == resource.data.recipientUserId);
    }

    match /ChangelogEntries/{entryId} {
      allow read: true;
      allow write: if isAdmin(request.auth.uid);
    }

    match /SystemConfiguration/{docId} {
      allow read, write: if isAdmin(request.auth.uid);
    }

    match /AdminAuditLogs/{logId} {
      allow create, read: if isAdminOrModerator(request.auth.uid);
    }

    match /mail/{docId} {
      allow read, write: if false;
    }
  }
}
