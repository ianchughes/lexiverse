
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getRole(userId) {
      return get(/databases/$(database)/documents/admin_users/$(userId)).data.role;
    }
    
    function isAdmin() {
      return isSignedIn() && getRole(request.auth.uid) == 'admin';
    }

    function isModeratorOrAdmin() {
        return isSignedIn() && getRole(request.auth.uid) in ['admin', 'moderator'];
    }

    // --- User Profiles ---
    match /Users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isModeratorOrAdmin();
      allow delete: if isAdmin(); 
    }
    
    // --- Admin Roles ---
    match /admin_users/{userId} {
      // Allow a user to get their own role doc. `get()` is used by rule functions. This breaks the recursive check.
      allow get: if isOwner(userId);
      // An admin can list all roles (for the UI) and write any role.
      allow list, write: if isAdmin();
    }
    
    // --- Daily Puzzles ---
    match /DailyPuzzles/{puzzleId} {
      allow read: if true; // Publicly readable
      allow write: if isModeratorOrAdmin();
    }
    
    // --- Word Management ---
    match /Words/{wordId} {
      allow read: if true; // Publicly readable
      allow write: if isModeratorOrAdmin();
    }
    
    match /WordSubmissionsQueue/{submissionId} {
      allow read: if isModeratorOrAdmin();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.submittedByUID;
      allow write: if isModeratorOrAdmin();
    }
    
    match /RejectedWords/{wordId} {
      allow read: if true; // Publicly readable
      allow write: if isModeratorOrAdmin();
    }

    // --- Circles ---
    function isCircleMember(circleId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId)_$(request.auth.uid));
    }
    
    function getCircleMemberRole(circleId) {
      return get(/databases/$(database)/documents/CircleMembers/$(circleId)_$(request.auth.uid)).data.role;
    }

    function isCircleAdmin(circleId) {
      return isSignedIn() && getCircleMemberRole(circleId) == 'Admin';
    }
    
    function isCircleAdminOrInfluencer(circleId) {
      return isSignedIn() && getCircleMemberRole(circleId) in ['Admin', 'Influencer'];
    }

    match /Circles/{circleId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isCircleAdmin(circleId) || isModeratorOrAdmin();
      allow delete: if isCircleAdmin(circleId) || isModeratorOrAdmin();
    }

    match /CircleMembers/{memberId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isCircleAdmin(resource.data.circleId) || isModeratorOrAdmin();
      allow delete: if isOwner(resource.data.userId) || isCircleAdmin(resource.data.circleId) || isModeratorOrAdmin();
    }
    
    match /CircleInvites/{inviteId} {
      allow read, write: if isSignedIn();
    }
    
    match /CircleDailyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow write: if isSignedIn(); // System/backend writes this
    }
    match /CircleWeeklyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow write: if isModeratorOrAdmin();
    }
    match /CircleMonthlyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow write: if isModeratorOrAdmin();
    }
    
    // --- Notifications ---
    match /Notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
        allow create: if isSignedIn(); // Actions can create notifications for others
        allow delete: if false;
    }

    // --- System & App Config ---
    match /SystemConfiguration/{docId} {
      allow read: if true;
      allow write: if isModeratorOrAdmin();
    }
    
    // --- Admin Audit Logs ---
    match /AdminAuditLogs/{logId} {
      allow create: if isModeratorOrAdmin();
      allow read, update, delete: if false;
    }

    // --- User Suggestions ---
    match /UserSuggestions/{suggestionId} {
      allow create: if true;
      allow read, update, delete: if isModeratorOrAdmin();
    }
    
    // --- Word Transfers ---
    match /WordTransfers/{transferId} {
        allow create: if isOwner(request.resource.data.senderUserId);
        allow read: if isOwner(resource.data.senderUserId) || isOwner(resource.data.recipientUserId);
        allow update: if isOwner(resource.data.recipientUserId) && resource.data.status == 'PendingRecipient';
    }
    
    // --- Changelog ---
    match /ChangelogEntries/{entryId} {
        allow read: if true;
        allow write: if isModeratorOrAdmin();
    }
    
    // --- Mail (for Trigger Email Extension) ---
    match /mail/{docId} {
      allow read: if isModeratorOrAdmin(); // Only admins/mods can see email logs
      allow create: if true; // Any backend process or user action can queue an email
      allow write, delete: if false; // Only the extension should process/delete
    }
  }
}
