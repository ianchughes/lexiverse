rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isUserAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin';
    }

    function isModeratorOrAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) && (
        get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin' ||
        get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'moderator'
      );
    }
    
    // Anyone can read their own user profile.
    // Users can only create their own profile.
    // Users can only update their own profile, and cannot change their role or score.
    // Only Admins can delete users (deletion is handled in server-side actions).
    match /Users/{userId} {
      allow read: if isSignedIn();
      allow create: if isUser(userId);
      allow update: if isUser(userId) && 
                      request.resource.data.keys().hasOnly(['username', 'photoURL', 'lastPlayedDate_GMT', 'hasSeenWelcomeInstructions', 'wotdStreakCount', 'overallPersistentScore', 'activeCircleId']);
      allow delete: if false; // Deletion should be a server-side admin action
    }

    // Admin roles can only be read/written by other admins.
    match /admin_users/{userId} {
      allow read, write: if isUserAdmin();
    }
    
    // Master word list is readable by any logged-in user.
    // Only moderators/admins can add or update words via server actions.
    match /Words/{wordText} {
      allow read: if isSignedIn();
      allow create, update: if isModeratorOrAdmin();
      allow delete: if false;
    }

    // Rejected word list is readable by any logged-in user.
    // Only moderators/admins can add words here via server actions.
    match /RejectedWords/{wordText} {
      allow read: if isSignedIn();
      allow create: if isModeratorOrAdmin();
      allow update, delete: if false;
    }

    // Users can create their own word submissions.
    // Only moderators/admins can update or delete submissions.
    match /WordSubmissionsQueue/{submissionId} {
      allow read, create: if isUser(request.resource.data.submittedByUID);
      allow update, delete: if isModeratorOrAdmin();
    }

    // Circles
    // Anyone logged in can create a circle. Anyone can read public circles.
    // Members can read private circles. Admins can update/delete.
    function isCircleMember(circleId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId)_$(request.auth.uid));
    }
    
    function isCircleAdmin(circleId) {
        return isCircleMember(circleId) &&
               get(/databases/$(database)/documents/CircleMembers/$(circleId)_$(request.auth.uid)).data.role == 'Admin';
    }
    
    function isCircleAdminOrInfluencer(circleId) {
       return isCircleMember(circleId) &&
              (get(/databases/$(database)/documents/CircleMembers/$(circleId)_$(request.auth.uid)).data.role == 'Admin' ||
               get(/databases/$(database)/documents/CircleMembers/$(circleId)_$(request.auth.uid)).data.role == 'Influencer');
    }

    match /Circles/{circleId} {
      allow create: if isSignedIn();
      allow read: if resource.data.isPublic == true || isCircleMember(circleId) || isModeratorOrAdmin();
      allow update: if isCircleAdmin(circleId) || isUserAdmin();
      allow delete: if isCircleAdmin(circleId) || isUserAdmin();
    }
    
    match /CircleMembers/{memberId} {
      allow read: if isCircleMember(resource.data.circleId) || isModeratorOrAdmin();
      allow create: if (isUser(request.resource.data.userId) && (isCircleAdminOrInfluencer(request.resource.data.circleId) || get(/databases/$(database)/documents/Circles/$(request.resource.data.circleId)).data.isPublic == true)) || isUserAdmin();
      allow update: if isCircleAdmin(resource.data.circleId) || isUserAdmin();
      allow delete: if isUser(resource.data.userId) || isCircleAdmin(resource.data.circleId) || isUserAdmin();
    }
    
    match /CircleInvites/{inviteId} {
      allow read: if isUser(resource.data.inviteeUserId) || isUser(resource.data.inviterUserId) || isModeratorOrAdmin();
      allow create: if isUser(request.resource.data.inviterUserId);
      allow update: if isUser(request.resource.data.inviteeUserId) || isModeratorOrAdmin();
      allow delete: if isUser(resource.data.inviterUserId) || isModeratorOrAdmin();
    }

    match /CircleDailyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId) || isModeratorOrAdmin();
      allow create, update: if isSignedIn(); // Allow any signed in user to increment scores via server action
      allow delete: if false;
    }
    match /CircleWeeklyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId) || isModeratorOrAdmin();
      allow create, update, delete: if isUserAdmin(); // Only admins can manage aggregates
    }
    match /CircleMonthlyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId) || isModeratorOrAdmin();
      allow create, update, delete: if isUserAdmin(); // Only admins can manage aggregates
    }

    match /WordTransfers/{transferId} {
      allow read: if isUser(resource.data.senderUserId) || isUser(resource.data.recipientUserId);
      allow create: if isUser(request.resource.data.senderUserId);
      allow update: if isUser(request.resource.data.recipientUserId) && request.resource.data.status != resource.data.status;
      allow delete: if false;
    }
    
    match /Notifications/{notificationId} {
      allow read, update: if isUser(resource.data.userId);
      allow create: if isSignedIn(); // Created by server actions
      allow delete: if isUser(resource.data.userId);
    }
    
    // System-wide configuration, only readable/writable by admins
    match /SystemConfiguration/{docId} {
      allow read, write: if isModeratorOrAdmin();
    }

    // Admins can create logs, but no one can modify or delete them
    match /AdminAuditLogs/{logId} {
      allow read: if isModeratorOrAdmin();
      allow create: if isModeratorOrAdmin();
      allow update, delete: if false;
    }
    
    // User suggestions can be created by anyone, but only read/managed by admins
    match /UserSuggestions/{suggestionId} {
        allow create: if true;
        allow read, update: if isModeratorOrAdmin();
        allow delete: if false;
    }

    // Changelog entries are public, but only managed by admins
    match /ChangelogEntries/{entryId} {
        allow read: if true;
        allow create, update, delete: if isUserAdmin();
    }
    
    // Mail collection for Trigger Email extension. Should only be created by server actions.
    match /mail/{mailId} {
      allow read: if isModeratorOrAdmin();
      allow write: if isSignedIn(); // Let server actions create emails
    }

  }
}
