
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role;
    }

    function isModeratorOrAdmin() {
      let userRole = getUserRole();
      return isSignedIn() && (userRole == 'moderator' || userRole == 'admin');
    }
    
    function isAdmin() {
      return isSignedIn() && getUserRole() == 'admin';
    }
    
    function isCircleMember(circleId) {
      return isSignedIn() && exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
    }

    function isCircleAdmin(circleId) {
       let memberData = get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data;
       return isCircleMember(circleId) && memberData.role == 'Admin';
    }
    
    function isCircleAdminOrInfluencer(circleId) {
      let memberData = get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data;
      return isCircleMember(circleId) && (memberData.role == 'Admin' || memberData.role == 'Influencer');
    }

    // Top-level admin rule for full access
    match /{document=**} {
      allow read, write: if isAdmin();
    }
    
    // User profile rules
    match /Users/{userId} {
      // READ: A user can only read their own profile.
      allow read: if isUser(userId);
      
      // CREATE: A user can create their own profile document (on signup).
      // The request.resource.data checks ensure they can't assign themselves a score or admin status on creation.
      allow create: if isUser(userId) &&
                       request.resource.data.overallPersistentScore == 0 &&
                       request.resource.data.accountStatus == 'Active' &&
                       request.resource.data.wotdStreakCount == 0;

      // UPDATE: A user can only update specific, non-critical fields on their own profile.
      allow update: if isUser(userId) &&
                       request.resource.data.keys().hasAll(['username', 'photoURL', 'hasSeenWelcomeInstructions', 'activeCircleId']) &&
                       !request.resource.data.keys().hasAny(['email', 'overallPersistentScore', 'accountStatus', 'role', 'dateCreated', 'uid', 'registrationCountry', 'lastPlayedDate_GMT', 'wotdStreakCount']);
                       
      // DELETE: No user can delete their own profile directly. Must be handled by an admin.
      allow delete: if false;
    }
    
    // Admin roles can only be read by the user themselves or other admins/mods.
    // Can only be written by admins.
    match /admin_users/{userId} {
      allow read: if isUser(userId) || isModeratorOrAdmin();
      allow write: if isAdmin();
    }

    // DailyPuzzles can be read by any signed-in user, but only written by admins/mods.
    match /DailyPuzzles/{puzzleId} {
      allow read: if isSignedIn();
      allow write: if isModeratorOrAdmin();
    }

    // The Master Word list can be read by any signed-in user.
    // This allows the game client to check if a word is valid.
    // Only admins/mods can add or change words.
    match /Words/{wordId} {
      allow read: if isSignedIn();
      allow write: if isModeratorOrAdmin();
    }
    
    // The Rejected Word list can be read by any signed-in user (for client-side checks)
    // But only written to by admins/mods.
    match /RejectedWords/{wordId} {
        allow read: if isSignedIn();
        allow write: if isModeratorOrAdmin();
    }
    
    // Word Submissions Queue rules
    match /WordSubmissionsQueue/{submissionId} {
        // CREATE: Any signed-in user can create a new word submission.
        allow create: if isSignedIn() && request.resource.data.submittedByUID == request.auth.uid;
        // READ/UPDATE/DELETE: No user (not even owner) can read or modify the queue directly.
        // This is handled by admins/mods.
        allow read, update, delete: if isModeratorOrAdmin();
    }

    // Circles can be read if public or if the user is a member.
    // Write access is limited to admins/mods (handled by server functions).
    match /Circles/{circleId} {
      allow read: if isSignedIn() && (isCircleMember(circleId) || get(/databases/$(database)/documents/Circles/$(circleId)).data.isPublic == true);
      allow write: if isModeratorOrAdmin();
    }

    // CircleMembers can be read if the user is a member of the circle or the circle is public.
    // Write access is limited to admins/mods (handled by server functions).
    match /CircleMembers/{memberId} {
      // Extract circleId from memberId which is formatted as 'circleId_userId'
      let circleId = memberId.split('_')[0];
      allow read: if isSignedIn() && (isCircleMember(circleId) || get(/databases/$(database)/documents/Circles/$(circleId)).data.isPublic == true);
      allow write: if isModeratorOrAdmin();
    }
    
    match /CircleInvites/{inviteId} {
      // Allow read only if user is inviter or invitee
      allow read: if isSignedIn() && (request.auth.uid == resource.data.inviterUserId || request.auth.uid == resource.data.inviteeUserId);
      allow create, update, delete: if isSignedIn(); // Handled by server functions with more detailed logic
    }
    
    match /WordTransfers/{transferId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.senderUserId || request.auth.uid == resource.data.recipientUserId);
      allow create, update: if isSignedIn(); // Handled by server functions
      allow delete: if false; // Transfers should expire or be resolved, not deleted by users
    }
    
    match /Notifications/{notificationId} {
      allow read, update: if isUser(resource.data.userId);
      allow create: if isSignedIn(); // Created by server functions
      allow delete: if false;
    }

    // Mail collection for Trigger Email extension. Should only be writable by server-side logic.
    match /mail/{emailId} {
      allow read, write: if false; // No client access
    }

    // Admin-only or Moderator-accessible collections
    match /UserSuggestions/{suggestionId} {
      allow create: if isSignedIn();
      allow read, write: if isModeratorOrAdmin();
    }
    
    match /ChangelogEntries/{entryId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /AdminAuditLogs/{logId} {
        allow read: if isModeratorOrAdmin();
        allow write: if isModeratorOrAdmin(); // Only server functions should write
    }

    match /SystemConfiguration/{docId} {
        allow read: if isSignedIn();
        allow write: if isModeratorOrAdmin();
    }

    // Deny all other access by default
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
