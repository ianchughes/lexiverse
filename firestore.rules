
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // These functions can't use `let` and must return a boolean.
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isModerator() {
      return isSignedIn() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'moderator';
    }
    
    function isAdminOrModerator() {
      return isSignedIn() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }

    function isCircleMember(circleId) {
      return isSignedIn() && exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
    }
    
    function isCircleAdmin(circleId) {
      return isCircleMember(circleId) && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role == 'Admin';
    }

    function isCircleAdminOrInfluencer(circleId) {
      return isCircleMember(circleId) && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role in ['Admin', 'Influencer'];
    }


    // --- Collection Rules ---

    match /Users/{userId} {
      // Anyone can create a user profile (sign up)
      allow create: if true;
      // Only the user themselves or an admin can read/update their own profile
      allow read, update: if isUser(userId) || isAdminOrModerator();
      // Only an admin can delete a user
      allow delete: if isAdmin();
    }

    match /admin_users/{userId} {
      // Only admins can see who else is an admin/moderator
      allow read: if isAdminOrModerator();
      // No client-side writes to this collection are allowed. Must be done from server/console.
      allow write: if false;
    }
    
    match /Words/{wordId} {
      // Any authenticated user can read from the master word list.
      allow read: if isSignedIn();
      // Only admins can add, update or delete words from the master dictionary directly.
      allow create, update, delete: if isAdminOrModerator();
    }
    
    match /RejectedWords/{wordId} {
      // Any authenticated user can check if a word is on the rejected list.
      allow read: if isSignedIn();
      // Only admins can add words to the rejected list.
      allow create: if isAdminOrModerator();
    }

    match /WordSubmissionsQueue/{submissionId} {
        // A user can create a submission for themselves
        allow create: if isUser(request.resource.data.submittedByUID);
        // Only admins and moderators can read, update, or delete from the queue
        allow read, update, delete: if isAdminOrModerator();
    }

    match /DailyPuzzles/{puzzleId} {
      // Any authenticated user can read the daily puzzle.
      allow read: if isSignedIn();
      // Only admins can create, update, or delete puzzles.
      allow create, update, delete: if isAdmin();
    }
    
    match /SystemConfiguration/{docId} {
      // Only admins can read/write system-wide settings.
      allow read, write: if isAdmin();
    }

    match /AdminAuditLogs/{logId} {
        // Admins/mods can create logs.
        allow create: if isAdminOrModerator();
        // Only admins/mods can read the audit logs.
        allow read: if isAdminOrModerator();
    }

    // --- Circle Feature Rules ---

    match /Circles/{circleId} {
      // Any authenticated user can create a circle.
      allow create: if isSignedIn();
      // Public circles are readable by anyone signed in. Private circles only by members.
      allow read: if isSignedIn() && (resource.data.isPublic == true || isCircleMember(circleId));
      // Only a circle admin can update or delete their circle.
      allow update, delete: if isCircleAdmin(circleId);
    }
    
    match /CircleMembers/{memberId} {
      // To join a circle, one must be the user being added AND it must be through an admin/invite action (server-side).
      // A user can leave a circle (delete their own membership).
      allow create: if isUser(request.resource.data.userId);
      allow delete: if isUser(resource.data.userId);
      // Only circle members can see who else is in the circle.
      allow read: if isCircleMember(resource.data.circleId);
      // Only a circle admin can update member roles.
      allow update: if isCircleAdmin(resource.data.circleId);
    }
    
    match /CircleInvites/{inviteId} {
        // Read: The inviter or the invitee can read the invite.
        allow read: if isSignedIn() && (request.auth.uid == resource.data.inviterUserId || request.auth.uid == resource.data.inviteeUserId);
        // Create: The user creating the invite must be an Admin or Influencer of that circle.
        allow create: if isSignedIn() && isCircleAdminOrInfluencer(request.resource.data.circleId);
        // Update: The invitee can update (accept/decline).
        allow update: if isUser(request.resource.data.inviteeUserId);
        // Delete: The inviter can delete/rescind their own invite.
        allow delete: if isUser(resource.data.inviterUserId);
    }
    
    match /CircleDailyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow create, update: if isSignedIn();
    }
    match /CircleWeeklyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow create, update: if false; // Should only be written by a trusted server process/function.
    }
    match /CircleMonthlyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow create, update: if false; // Should only be written by a trusted server process/function.
    }

    match /Notifications/{notificationId} {
      // Users can only read, create, and update their own notifications
      allow read, update: if isUser(resource.data.userId);
      // Allow server-side actions (like circle actions) to create notifications for a user
      allow create: if isUser(request.resource.data.userId);
    }

    match /WordTransfers/{transferId} {
      // The sender or recipient can read the transfer details. Admins can also view.
      allow read: if (isUser(resource.data.senderUserId) || isUser(resource.data.recipientUserId) || isAdmin());
      // The sender must be the one initiating the transfer.
      allow create: if isUser(request.resource.data.senderUserId);
      // The recipient must be the one updating (accepting/declining).
      allow update: if isUser(resource.data.recipientUserId);
    }

    match /ChangelogEntries/{entryId} {
        // Anyone can read changelogs.
        allow read: if true;
        // Only admins can create/delete changelogs.
        allow create, delete: if isAdmin();
    }
    
    match /UserSuggestions/{suggestionId} {
      // Anyone can create a suggestion.
      allow create: if true;
      // Only admins/mods can read and update suggestions.
      allow read, update: if isAdminOrModerator();
    }
    
    match /mail/{mailId} {
      // Only authenticated users can trigger an email to be sent (e.g. circle invites for non-users).
      // Further security can be added in Cloud Functions if needed.
      allow create: if isSignedIn();
    }

  }
}
