
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isModeratorOrAdmin() {
      // Check if the user document exists in admin_users and has a role of 'admin' or 'moderator'
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }

    function canReadOwnRole() {
        return request.auth != null && exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }
    
    function isCircleMember(circleId) {
       return request.auth != null && exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
    }

    function isCircleAdmin(circleId) {
        let memberDocPath = /databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid);
        return exists(memberDocPath) && get(memberDocPath).data.role == 'Admin';
    }

    function isCircleAdminOrInfluencer(circleId) {
        let memberDocPath = /databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid);
        return exists(memberDocPath) && get(memberDocPath).data.role in ['Admin', 'Influencer'];
    }

    // --- Global Admin Override ---
    // This rule grants admins full read/write access to everything, bypassing all other rules for them.
    match /{document=**} {
      allow read, write: if isAdmin();
    }
    
    // --- Collection-Specific Rules (for non-admins) ---

    match /Users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if isModeratorOrAdmin();
    }
    
    match /admin_users/{userId} {
      allow read: if request.auth.uid == userId; // Simplified to break circular dependency
      allow write: if isModeratorOrAdmin();
    }
    
    match /Words/{wordId} {
      allow read: if true;
      allow write: if isModeratorOrAdmin();
    }

    match /RejectedWords/{wordId} {
      allow read: if request.auth != null; // Allow any signed-in user to read
      allow write: if isModeratorOrAdmin();
    }
    
    match /WordSubmissionsQueue/{submissionId} {
        allow create: if request.auth != null && request.resource.data.submittedByUID == request.auth.uid;
        allow read, update, delete: if isModeratorOrAdmin();
    }
    
    match /DailyPuzzles/{puzzleId} {
      allow read: if true;
      allow write: if isModeratorOrAdmin();
    }
    
     match /ChangelogEntries/{entryId} {
      allow read: if true;
      allow create, update, delete: if isModeratorOrAdmin();
    }

    match /SystemConfiguration/{docId} {
      allow read: if true;
      allow write: if isModeratorOrAdmin();
    }

    // Circle Related Rules
    match /Circles/{circleId} {
        allow read: if true;
        allow create: if request.auth.uid == request.resource.data.creatorUserID;
        allow update: if isCircleAdmin(circleId);
        allow delete: if isCircleAdmin(circleId);
    }
    
    match /CircleMembers/{memberId} {
        // memberId is CircleID_UserID
        allow read: if isCircleMember(memberId.split('_')[0]);
        allow create: if request.auth.uid == request.resource.data.userId; // When creating a circle
        // Leaving, Role changes, and Removal are handled by server-side actions/transactions with admin checks.
        allow update: if isCircleAdmin(memberId.split('_')[0]);
        allow delete: if request.auth.uid == memberId.split('_')[1] || isCircleAdmin(memberId.split('_')[0]); // Self-leave or Admin removal
    }
    
    match /CircleInvites/{inviteId} {
        allow read: if request.auth.uid == resource.data.inviterUserId || request.auth.uid == resource.data.inviteeUserId;
        allow create: if isCircleAdminOrInfluencer(request.resource.data.circleId) && request.auth.uid == request.resource.data.inviterUserId;
        allow update: if request.auth.uid == resource.data.inviteeUserId || isCircleAdmin(request.resource.data.circleId);
        allow delete: if request.auth.uid == resource.data.inviterUserId || isCircleAdmin(request.resource.data.circleId);
    }
    
     match /CircleDailyScores/{scoreId} {
        allow read: if isCircleMember(scoreId.split('_')[1]);
        allow create, update: if request.auth != null; // Game server/functions update this
    }
    
    match /CircleWeeklyScores/{scoreId} {
        allow read: if isCircleMember(scoreId.split('_')[1]);
        allow create, update: if request.auth != null;
    }
    
    match /CircleMonthlyScores/{scoreId} {
        allow read: if isCircleMember(scoreId.split('_')[1]);
        allow create, update: if request.auth != null;
    }

    match /UserSuggestions/{suggestionId} {
        allow create: if request.auth != null;
        allow read, update, delete: if isModeratorOrAdmin();
    }
    
    match /Notifications/{notificationId} {
        allow read, update, delete: if request.auth.uid == resource.data.userId;
        allow create: if request.auth.uid == request.resource.data.userId;
    }

    match /WordTransfers/{transferId} {
        allow read: if request.auth.uid == resource.data.senderUserId || request.auth.uid == resource.data.recipientUserId;
        allow create: if request.auth.uid == request.resource.data.senderUserId;
        allow update: if request.auth.uid == resource.data.recipientUserId && resource.data.status == 'PendingRecipient'; // Check status
        allow delete: if isModeratorOrAdmin();
    }
    
     match /AdminAuditLogs/{logId} {
        allow read: if isModeratorOrAdmin();
        allow create: if isModeratorOrAdmin();
        allow update, delete: if false; // Logs should be immutable
    }

     match /mail/{mailId} {
        allow read: if isModeratorOrAdmin();
        allow create: if request.auth != null;
        allow write: if isModeratorOrAdmin();
    }
  }
}
