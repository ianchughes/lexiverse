
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isUserAuthenticated() && exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isModeratorOrAdmin() {
      return isUserAuthenticated() && exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }
    
    function isCircleMember(circleId) {
       return isUserAuthenticated() && exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
    }
    
    function isCircleAdmin(circleId) {
        return isUserAuthenticated() && isCircleMember(circleId) && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role == 'Admin';
    }
    
    function isCircleAdminOrInfluencer(circleId) {
        return isUserAuthenticated() && isCircleMember(circleId) && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role in ['Admin', 'Influencer'];
    }

    // --- Collection Rules ---

    // Users: Can read their own profile, create on signup. Admins can update/delete. Logged-in users can read other profiles.
    match /Users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // admin_users: Only other admins can view/modify admin roles.
    match /admin_users/{userId} {
      allow read, write: if isAdmin();
    }

    // Words: Logged-in users can read. Admins can write.
    match /Words/{wordId} {
      allow read: if isUserAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // RejectedWords: Admins can write. Logged-in users can read.
    match /RejectedWords/{wordId} {
       allow read: if isUserAuthenticated();
       allow create, update, delete: if isModeratorOrAdmin();
    }

    // WordSubmissionsQueue: Users create their own. Admins/Mods can read/update/delete.
    match /WordSubmissionsQueue/{submissionId} {
      allow create: if isOwner(request.resource.data.submittedByUID);
      allow read, update, delete: if isModeratorOrAdmin();
    }
    
    // WordTransfers: Users can create their own. Involved parties can read/update.
    match /WordTransfers/{transferId} {
      allow create: if isOwner(request.resource.data.senderUserId);
      allow read: if isOwner(request.resource.data.senderUserId) || isOwner(request.resource.data.recipientUserId);
      allow update: if isOwner(request.resource.data.recipientUserId); // Only recipient can accept/decline
      allow delete: if false; // Deletions should be handled by status changes (Expired, Cancelled)
    }

    // DailyPuzzles: Logged-in users can read. Admins can write.
    match /DailyPuzzles/{puzzleId} {
      allow read: if isUserAuthenticated();
      allow write: if isAdmin();
    }
    
    // SystemConfiguration: Only Admins can read/write
    match /SystemConfiguration/{docId} {
        allow read, write: if isAdmin();
    }
    
    // Circles: Logged-in users can create. Public circles are readable by any user, private only by members.
    // Circle details can be updated only by the circle admin.
    match /Circles/{circleId} {
      allow create: if isUserAuthenticated();
      allow read: if resource.data.isPublic == true || isCircleMember(circleId);
      allow update: if isCircleAdmin(circleId) || isAdmin();
      allow delete: if isCircleAdmin(circleId) || isAdmin();
    }
    
    // CircleMembers: Only circle admins can add/remove (via invites/kick). Users can remove themselves.
    // Members of a circle can read the list of other members.
    match /CircleMembers/{memberId} {
       allow create: if isCircleAdmin(request.resource.data.circleId);
       allow read: if isCircleMember(resource.data.circleId);
       allow update: if isCircleAdmin(resource.data.circleId); // For changing roles
       allow delete: if isOwner(resource.data.userId) || isCircleAdmin(resource.data.circleId); // Leave or be kicked
    }
    
    // CircleInvites: Circle admins/influencers can create. Recipient can update (accept/decline).
    match /CircleInvites/{inviteId} {
      allow create: if isCircleAdminOrInfluencer(request.resource.data.circleId);
      allow read: if isOwner(request.resource.data.inviterUserId) || isOwner(request.resource.data.inviteeUserId);
      allow update: if isOwner(request.resource.data.inviteeUserId);
      allow delete: if isOwner(request.resource.data.inviterUserId) || isCircleAdmin(request.resource.data.circleId) || isAdmin();
    }
    
    // Circle Scores: Members can read their own circle's score. Server/functions can write.
    match /CircleDailyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow write: if false; // Server-side updates only
    }
    match /CircleWeeklyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow write: if false; // Server-side updates only
    }
    match /CircleMonthlyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow write: if false; // Server-side updates only
    }

    // Notifications: Users can read/update/delete their own notifications. Server/functions create them.
    match /Notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isUserAuthenticated(); // Created by server functions or specific trusted client actions
    }
    
    // UserSuggestions: Any user can create. Admins/Mods can read/update.
    match /UserSuggestions/{suggestionId} {
        allow create: if true; // Open for anyone to suggest
        allow read, update: if isModeratorOrAdmin();
    }

    // Changelog: Anyone can read. Only admins can write.
    match /ChangelogEntries/{entryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // AdminAuditLogs: Admins/Mods can create and read.
    match /AdminAuditLogs/{logId} {
      allow create, read: if isModeratorOrAdmin();
    }

    // mail: No client access. Used by Trigger Email extension.
    match /mail/{docId} {
      allow read, write: if false;
    }
  }
}
