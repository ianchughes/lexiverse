
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    function isUserOwner(userId) {
      return request.auth.uid == userId;
    }
    function isAdmin() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin';
    }
    function isAdminOrModerator() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }
    function isCircleMember(circleId) {
        return isUserAuthenticated() && exists(path('/databases/' + database + '/documents/CircleMembers/' + circleId + '_' + request.auth.uid));
    }
    function isCircleAdmin(circleId) {
      return isUserAuthenticated() && exists(path('/databases/' + database + '/documents/CircleMembers/' + circleId + '_' + request.auth.uid))
        && get(path('/databases/' + database + '/documents/CircleMembers/' + circleId + '_' + request.auth.uid)).data.role == 'Admin';
    }
    function isCircleAdminOrInfluencer(circleId) {
      return isUserAuthenticated() && exists(path('/databases/' + database + '/documents/CircleMembers/' + circleId + '_' + request.auth.uid))
        && get(path('/databases/' + database + '/documents/CircleMembers/' + circleId + '_' + request.auth.uid)).data.role in ['Admin', 'Influencer'];
    }

    // --- Collections ---

    // Users can create their own profile, read any public profile, and update their own. Admins can update any profile.
    match /Users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserOwner(userId);
      allow update: if isUserOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Admins and moderators can read the admin_users collection to verify roles. Only admins can assign roles.
    match /admin_users/{userId} {
      allow get: if isAdminOrModerator();
      allow list, create, update, delete: if isAdmin();
    }

    // DailyPuzzles can be read by any authenticated user. Only admins can manage them.
    match /DailyPuzzles/{puzzleId} {
      allow read: if isUserAuthenticated();
      allow write: if isAdmin();
    }

    // Words (Master Dictionary) can be read by any auth'd user. Only Admins/Moderators can write.
    match /Words/{wordId} {
      allow read: if isUserAuthenticated();
      allow write: if isAdminOrModerator();
    }

    // RejectedWords list can be read by auth'd users, written by Admins/Moderators.
    match /RejectedWords/{wordId} {
      allow read: if isUserAuthenticated();
      allow write: if isAdminOrModerator();
    }

    // WordSubmissionsQueue can be created by any auth'd user, read/deleted by Admins/Mods.
    match /WordSubmissionsQueue/{submissionId} {
      allow create: if isUserAuthenticated();
      allow read, delete: if isAdminOrModerator();
      allow update: if false; // Submissions shouldn't be updated, only created/deleted.
    }

    // SystemConfiguration can only be read/written by full Admins for critical settings.
    match /SystemConfiguration/{docId} {
      allow read, write: if isAdmin();
    }

    // --- Circle-related Collections ---

    // Circles can be created by any auth'd user.
    // Public circles can be read by anyone. Private circles only by members.
    // Updates/Deletes only by circle admin or game admin.
    match /Circles/{circleId} {
      allow read: if resource.data.isPublic == true || isCircleMember(circleId);
      allow create: if isUserAuthenticated();
      allow update: if isCircleAdmin(circleId) || isAdmin();
      allow delete: if isCircleAdmin(circleId) || isAdmin();
    }

    // CircleMembers: Members can read other members of the same circle.
    // Creating/Deleting members is handled by server-side actions/transactions which are trusted.
    // Direct client writes are limited to admins for safety.
    match /CircleMembers/{memberId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow create: if isUserAuthenticated(); // User creates their own membership on join/create circle
      allow delete: if (isUserAuthenticated() && resource.data.userId == request.auth.uid) || isCircleAdmin(resource.data.circleId) || isAdmin(); // Can leave, or be removed by admin
      allow update: if isCircleAdmin(resource.data.circleId) || isAdmin(); // Role changes
    }

    // CircleInvites
    match /CircleInvites/{inviteId} {
      allow create: if isUserAuthenticated();
      // Can read an invite if you sent it or if it was sent to you
      allow read: if isUserAuthenticated() && (resource.data.inviterUserId == request.auth.uid || resource.data.inviteeUserId == request.auth.uid);
      // Can update (accept/decline) if you are the invitee
      allow update: if isUserAuthenticated() && resource.data.inviteeUserId == request.auth.uid;
      // Can delete if you are the inviter, an admin of the circle, or a game admin
      allow delete: if isUserAuthenticated() && (resource.data.inviterUserId == request.auth.uid || isCircleAdmin(resource.data.circleId) || isAdmin());
    }

    // Circle Scores
    match /CircleDailyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow write: if false; // Scores updated via trusted server actions
    }
     match /CircleWeeklyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow write: if false; 
    }
     match /CircleMonthlyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow write: if false; 
    }

    // UserSuggestions: Users can create them, admins can read/update them.
    match /UserSuggestions/{suggestionId} {
      allow create: if true; // Open to all, even unauthenticated
      allow read, update: if isAdminOrModerator();
    }
    
    // Mail collection for Trigger Email extension. Locked down.
    match /mail/{emailId} {
        allow read, update, delete: if false;
        allow create: if isUserAuthenticated(); // Allow server actions from authenticated users to create mail.
    }
    
    // Notifications can be read/updated only by the recipient user.
    match /Notifications/{notificationId} {
        allow read, update: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
        allow create: if false; // Created by server actions
        allow delete: if false;
    }
    
    // WordTransfers can be created by owner, read by participants, updated by recipient.
    match /WordTransfers/{transferId} {
      allow create: if isUserAuthenticated() && request.resource.data.senderUserId == request.auth.uid;
      allow read: if isUserAuthenticated() && (resource.data.senderUserId == request.auth.uid || resource.data.recipientUserId == request.auth.uid);
      allow update: if isUserAuthenticated() && resource.data.recipientUserId == request.auth.uid;
      allow delete: if false; // Transfers expire or are completed, not deleted.
    }

    // Changelog can be read by anyone, only written by admins.
    match /ChangelogEntries/{entryId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // Admin Audit Logs are write-only for admins/mods, and read-only for them too.
    match /AdminAuditLogs/{logId} {
      allow create: if isAdminOrModerator();
      allow read: if isAdminOrModerator();
      allow update, delete: if false;
    }
  }
}
