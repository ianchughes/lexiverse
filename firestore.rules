rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isModeratorOrAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }
    
    function isCircleMember(circleId) {
      return isSignedIn() && exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
    }
    
    function isCircleAdmin(circleId) {
        return isCircleMember(circleId) && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role == 'Admin';
    }
    
    function isCircleAdminOrInfluencer(circleId) {
       return isCircleMember(circleId) && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role in ['Admin', 'Influencer'];
    }

    // --- User Data & Roles ---

    // admin_users: Stores admin/moderator roles. Only other admins can see/edit.
    match /admin_users/{userId} {
      allow read: if isOwner(userId) || isModeratorOrAdmin();
      allow write: if isModeratorOrAdmin();
    }
    
    // Users: Public profiles. Users can only edit their own profile.
    match /Users/{userId} {
      allow read: if isSignedIn();
      allow update: if isOwner(userId);
      allow create; // Handled by registration function
      allow delete: if false; // Deletion is an admin action
    }

    // --- Game Content ---
    
    // DailyPuzzles: Contains the puzzle for each day.
    match /DailyPuzzles/{puzzleId} {
      allow read: if isSignedIn();
      allow write: if isModeratorOrAdmin();
    }
    
    // Words: The master dictionary.
    match /Words/{wordId} {
      allow read: if isSignedIn();
      // Write access is handled by server-side moderation logic.
      // Direct client writes are disabled.
      allow write: if false; 
    }
    
    // RejectedWords: List of non-words.
    match /RejectedWords/{wordId} {
      allow read: if isSignedIn(); // FIX: Allow signed-in users to read to check validity
      allow write: if isModeratorOrAdmin();
    }

    // WordSubmissionsQueue: Users can create, admins/mods can read/update/delete
    match /WordSubmissionsQueue/{submissionId} {
      allow read, update, delete: if isModeratorOrAdmin();
      allow create: if request.auth.uid != null &&
                       request.resource.data.submittedByUID == request.auth.uid &&
                       request.resource.data.status == 'PendingModeratorReview';
    }

    // --- Circles ---
    match /Circles/{circleId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.creatorUserID == request.auth.uid;
        allow update: if isCircleAdmin(circleId);
        allow delete: if isCircleAdmin(circleId);
    }
    
    match /CircleMembers/{memberId} {
        // memberId is circleId_userId
        allow read: if isSignedIn();
        // Create is handled by server actions (invite acceptance, joining)
        allow create: if false;
        // Users can leave (delete their own membership doc), Admins can remove members
        allow delete: if isOwner(memberId.split('_')[1]) || isCircleAdmin(memberId.split('_')[0]);
        // Only Admins can update roles
        allow update: if isCircleAdmin(memberId.split('_')[0]);
    }
    
    match /CircleInvites/{inviteId} {
        // Inviter can read/delete their sent invite. Invitee can read it.
        allow read: if isSignedIn() && (request.auth.uid == resource.data.inviterUserId || request.auth.uid == resource.data.inviteeUserId);
        // Invites created via server action
        allow create: if false; 
        // Invitee can update to accept/decline. Inviter can update to remind.
        allow update: if isOwner(resource.data.inviteeUserId) || isOwner(resource.data.inviterUserId);
        allow delete: if isOwner(resource.data.inviterUserId) || isCircleAdmin(resource.data.circleId);
    }
    
    // Circle Scores
    match /CircleDailyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      // Writes are handled by server actions to prevent cheating
      allow write: if false;
    }
     match /CircleWeeklyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow write: if false;
    }
     match /CircleMonthlyScores/{scoreId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow write: if false;
    }
    
    // --- System & Logs ---
    
    // SystemConfiguration: Site-wide settings.
    match /SystemConfiguration/{docId} {
      allow read: if isSignedIn();
      allow write: if isModeratorOrAdmin();
    }

    // Notifications: Users can only interact with their own.
    match /Notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId); // Server actions create these, but rule validates ownership
    }
    
    // UserSuggestions: Logged-in users can create.
    match /UserSuggestions/{suggestionId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Read/update is for admins only
      allow read, update: if isModeratorOrAdmin();
    }

    // WordTransfers: For transferring word ownership
    match /WordTransfers/{transferId} {
        allow create: if false; // Handled by server action
        allow read: if isOwner(resource.data.senderUserId) || isOwner(resource.data.recipientUserId);
        allow update: if (isOwner(resource.data.recipientUserId) && resource.data.status == 'PendingRecipient' && request.resource.data.status != 'PendingRecipient') || 
                         (isOwner(resource.data.senderUserId) && resource.data.status == 'PendingRecipient' && request.resource.data.status == 'CancelledBySender');
    }

    // Changelog: Publicly readable
    match /ChangelogEntries/{entryId} {
        allow read: if true;
        allow write: if isModeratorOrAdmin();
    }

    // Admin Audit Logs
    match /AdminAuditLogs/{logId} {
      allow read: if isModeratorOrAdmin();
      allow create: if isModeratorOrAdmin();
      allow update, delete: if false;
    }

    // Mail collection for Trigger Email extension
    match /mail/{docId} {
      allow read, write: if false; // Only allow server-side access
    }
  }
}
