
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserAdmin() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin';
    }

    function isUserModerator() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    // --- Collections ---

    // Users: Users can read/update their own profile. Admins can manage any user.
    match /Users/{userId} {
      allow read: if isOwner(userId) || isUserAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isUserAdmin();
      allow delete: if isUserAdmin();
    }

    // admin_users: Only admins can read/write roles.
    match /admin_users/{userId} {
      allow read, write: if isUserAdmin();
    }

    // DailyPuzzles: Anyone can read puzzle data. Only admins can write.
    match /DailyPuzzles/{puzzleId} {
      allow read: if true;
      allow write: if isUserAdmin();
    }

    // Words: Anyone can read the dictionary. Only admins can write directly.
    match /Words/{wordId} {
      allow read: if true;
      allow write: if isUserAdmin();
    }

    // RejectedWords: Only moderators/admins can read/write.
    match /RejectedWords/{wordId} {
      allow read, write: if isUserModerator();
    }

    // WordSubmissionsQueue: Users create. Admins/Mods read & delete.
    match /WordSubmissionsQueue/{submissionId} {
      allow create: if isUserAuthenticated();
      allow read, delete: if isUserModerator();
    }

    // SystemConfiguration: Only admins can manage system settings.
    match /SystemConfiguration/{docId} {
      allow read, write: if isUserAdmin();
    }

    // AdminAuditLogs: Admins/Mods create and read logs. Immutable.
    match /AdminAuditLogs/{logId} {
      allow read, create: if isUserModerator();
    }

    // Circles: Public circles are readable by all. Private circles by members only.
    // Circle management (create/update/delete) requires specific permissions.
    match /Circles/{circleId} {
      function isCircleMember() {
        return isUserAuthenticated() && exists(path('/databases/$(database)/documents/CircleMembers/' + circleId + '_' + request.auth.uid));
      }
      function isCircleAdmin() {
        return isUserAuthenticated() && get(path('/databases/$(database)/documents/CircleMembers/' + circleId + '_' + request.auth.uid)).data.role == 'Admin';
      }

      allow read: if resource.data.isPublic == true || isCircleMember();
      allow create: if isUserAuthenticated();
      allow update: if isCircleAdmin();
      allow delete: if isCircleAdmin();
    }

    // CircleMembers: Composite key {circleId}_{userId}.
    match /CircleMembers/{memberId} {
      function isCircleAdminForThisMember() {
          let circle_id = request.method in ['create', 'update'] ? request.resource.data.circleId : resource.data.circleId;
          return isUserAuthenticated() && get(path('/databases/$(database)/documents/CircleMembers/' + circle_id + '_' + request.auth.uid)).data.role == 'Admin';
      }
      
      allow read: if isUserAuthenticated() && exists(path('/databases/$(database)/documents/CircleMembers/' + resource.data.circleId + '_' + request.auth.uid));
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isCircleAdminForThisMember();
      allow delete: if isOwner(resource.data.userId) || isCircleAdminForThisMember();
    }

    // CircleInvites: Can be read by inviter/invitee. Actions restricted by role.
    match /CircleInvites/{inviteId} {
        function isInviter() {
            return isOwner(resource.data.inviterUserId);
        }
        function isInvitee() {
            // On create, inviteeUserId may not exist, so check request data
            let targetUserId = request.method == 'create' ? request.resource.data.inviteeUserId : resource.data.inviteeUserId;
            return isOwner(targetUserId);
        }
        function isCircleAdminForThisInvite() {
            let circle_id = request.method == 'create' ? request.resource.data.circleId : resource.data.circleId;
            return isUserAuthenticated() && get(path('/databases/$(database)/documents/CircleMembers/' + circle_id + '_' + request.auth.uid)).data.role == 'Admin';
        }

        allow read: if isUserAuthenticated() && (isInviter() || isInvitee());
        allow create: if isOwner(request.resource.data.inviterUserId);
        allow update: if isUserAuthenticated() && isInvitee();
        allow delete: if isUserAuthenticated() && (isInviter() || isCircleAdminForThisInvite());
    }
    
    // CircleScores: Read by members. Writes handled by backend only.
    match /CircleDailyScores/{scoreId} {
      allow read: if isUserAuthenticated() && exists(path('/databases/$(database)/documents/CircleMembers/' + resource.data.circleId + '_' + request.auth.uid));
      allow write: if false;
    }

    // ChangelogEntries: Read by anyone, written by admins.
    match /ChangelogEntries/{entryId} {
        allow read: if true;
        allow write: if isUserAdmin();
    }

    // UserSuggestions: Created by users, managed by mods/admins.
    match /UserSuggestions/{suggestionId} {
        allow create: if isUserAuthenticated();
        allow read, update: if isUserModerator();
    }
    
    // Notifications: Users manage their own. Created by server actions.
    match /Notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
        allow create: if isUserAuthenticated();
    }

    // WordTransfers: Managed by sender and recipient.
    match /WordTransfers/{transferId} {
        function isSender() {
            return isOwner(request.method == 'create' ? request.resource.data.senderUserId : resource.data.senderUserId);
        }
        function isRecipient() {
            return isOwner(request.method == 'create' ? request.resource.data.recipientUserId : resource.data.recipientUserId);
        }

        allow read: if isUserAuthenticated() && (isSender() || isRecipient());
        allow create: if isUserAuthenticated() && isSender();
        allow update: if isUserAuthenticated() && isRecipient();
    }

    // mail: Used by Trigger Email extension. Only admins can create emails.
    match /mail/{docId} {
      allow create: if isUserAdmin();
    }
  }
}
