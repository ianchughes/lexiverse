
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===================================
    // Helper Functions
    // ===================================
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserAdmin(userId) {
      return get(/databases/$(database)/documents/admin_users/$(userId)).data.role == 'admin';
    }

    function isUserAdminOrModerator(userId) {
      return get(/databases/$(database)/documents/admin_users/$(userId)).data.role in ['admin', 'moderator'];
    }

    function isCircleMember(circleId, userId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + userId));
    }
    
    function isCircleAdmin(circleId, userId) {
      return get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + userId)).data.role == 'Admin';
    }
    
    function isCircleAdminOrInfluencer(circleId, userId) {
      return get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + userId)).data.role in ['Admin', 'Influencer'];
    }

    // ===================================
    // User Data & Roles
    // ===================================

    // User Profiles
    match /Users/{userId} {
      // Anyone authenticated can read any user's profile for display purposes
      allow read: if isUserAuthenticated();
      // Users can only create their own profile, and can only update their own profile.
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      // No user should be able to delete another user's profile from the client. Deletions are admin-only via server-side logic.
      allow delete: if false;
    }

    // Admin Roles
    match /admin_users/{userId} {
      // Only admins can read the list of other admins/moderators.
      allow read, write, create, delete: if isUserAdmin(request.auth.uid);
    }
    
    // Notifications
    match /Notifications/{notificationId} {
      allow read, update: if resource.data.userId == request.auth.uid;
      // Notifications are created server-side
      allow create: if false; 
    }

    // ===================================
    // Core Game Data
    // ===================================

    // Master list of all approved words
    match /Words/{wordId} {
      // Any authenticated user can read the words.
      allow read: if isUserAuthenticated();
      // Words are only added/updated/deleted via server-side admin/moderator actions, never by client.
      allow write: if false;
    }

    // List of permanently rejected words
    match /RejectedWords/{wordId} {
      allow read: if isUserAuthenticated();
      allow write: if false;
    }

    // Submissions awaiting moderation
    match /WordSubmissionsQueue/{submissionId} {
      // Users can only create submissions for themselves.
      allow create: if request.resource.data.submittedByUID == request.auth.uid;
      // Only admins/moderators can read/delete from the queue (via server actions)
      allow read, delete: if isUserAdminOrModerator(request.auth.uid);
      allow update: if false; // Updates are handled by deletion and re-creation if needed.
    }
    
    // Word Transfers
    match /WordTransfers/{transferId} {
        // Sender and recipient can read the transfer details
        allow read: if resource.data.senderUserId == request.auth.uid || resource.data.recipientUserId == request.auth.uid;
        // The sender creates the transfer (via server action)
        allow create: if request.resource.data.senderUserId == request.auth.uid;
        // The recipient can update the status (accept/decline)
        allow update: if resource.data.recipientUserId == request.auth.uid;
    }

    // Puzzles for each day
    match /DailyPuzzles/{puzzleId} {
      // Any authenticated user can read the daily puzzle.
      allow read: if isUserAuthenticated();
      // Puzzles are only managed by admins via server actions.
      allow write: if false;
    }

    // ===================================
    // Circles
    // ===================================
    match /Circles/{circleId} {
      // Public circles can be read by anyone, private circles only by members.
      allow read: if resource.data.isPublic == true || isCircleMember(circleId, request.auth.uid);
      // Only authenticated users can create circles.
      allow create: if isUserAuthenticated();
      // Updates and deletes are handled by circle admins via server actions.
      allow update, delete: if isCircleAdmin(circleId, request.auth.uid);
    }

    match /CircleMembers/{memberId} {
        // A user can read a membership doc if they are a member of that circle.
        allow read: if isCircleMember(resource.data.circleId, request.auth.uid);
        // Users can join a circle (create their own member doc). Admins can also add members.
        allow create: if request.resource.data.userId == request.auth.uid || isCircleAdmin(request.resource.data.circleId, request.auth.uid);
        // Members can't update their own role. Admins can update roles.
        allow update: if isCircleAdmin(resource.data.circleId, request.auth.uid);
        // Members can leave (delete their own doc). Admins can remove other members.
        allow delete: if resource.data.userId == request.auth.uid || isCircleAdmin(resource.data.circleId, request.auth.uid);
    }
    
    match /CircleInvites/{inviteId} {
        // Inviter and invitee can see the invite. Circle admins can see all invites for their circle.
        allow read: if resource.data.inviterUserId == request.auth.uid || resource.data.inviteeUserId == request.auth.uid || isCircleAdmin(resource.data.circleId, request.auth.uid);
        // Circle admins/influencers can create invites.
        allow create: if isCircleAdminOrInfluencer(request.resource.data.circleId, request.auth.uid);
        // Invitee can update (accept/decline).
        allow update: if resource.data.inviteeUserId == request.auth.uid;
        // Inviter or Circle Admin can delete the invite.
        allow delete: if resource.data.inviterUserId == request.auth.uid || isCircleAdmin(resource.data.circleId, request.auth.uid);
    }
    
    match /CircleDailyScores/{scoreId} {
        // Anyone in the circle can read the scores for that circle.
        allow read: if isCircleMember(resource.data.circleId, request.auth.uid);
        // Scores are updated via server actions.
        allow write: if false;
    }
    
    // ===================================
    // Admin & System Collections
    // ===================================

    // Changelog Entries
    match /ChangelogEntries/{entryId} {
      allow read: true;
      allow create, delete: if isUserAdmin(request.auth.uid);
    }

    // User Suggestions
    match /UserSuggestions/{suggestionId} {
      allow create: if isUserAuthenticated();
      // Only admins/moderators can view and update suggestions.
      allow read, update, delete: if isUserAdminOrModerator(request.auth.uid);
    }
    
    // Trigger Email Collection
    match /mail/{docId} {
      // Only server-side actions (with admin privileges) should write here. Client should not write directly.
      allow read, write: if false; 
    }
    
    // System Configuration
    match /SystemConfiguration/{docId} {
      // Only admins can read/write system settings
      allow read, write: if isUserAdmin(request.auth.uid);
    }
    
    // Admin Audit Logs
    match /AdminAuditLogs/{logId} {
      // Only admins/mods can read logs
      allow read: if isUserAdminOrModerator(request.auth.uid);
      // Only server-side logic can create logs
      allow create: if false;
    }
  }
}
