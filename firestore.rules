
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isRequestingUser(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function userIsAdmin() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin';
    }

    function userIsAdminOrModerator() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }

    function isCircleMember(circleId) {
      return isUserAuthenticated() && exists(path('/CircleMembers/' + circleId + '_' + request.auth.uid));
    }

    function isCircleAdmin(circleId) {
      return isUserAuthenticated() && get(path('/CircleMembers/' + circleId + '_' + request.auth.uid)).data.role == 'Admin';
    }
    
    function isCircleAdminOrInfluencer(circleId) {
       return isUserAuthenticated() && get(path('/CircleMembers/' + circleId + '_' + request.auth.uid)).data.role in ['Admin', 'Influencer'];
    }

    // --- Collection Rules ---

    // Users can create their own profile, read any profile, and only update/delete their own.
    match /Users/{userId} {
      allow create: if isUserAuthenticated() && request.auth.uid == userId;
      allow read: if isUserAuthenticated();
      allow update: if isRequestingUser(userId) || userIsAdmin();
      allow delete: if userIsAdmin();
    }
    
    // Only admins can read/write to the admin_users collection.
    match /admin_users/{userId} {
      allow read, write: if userIsAdmin();
    }

    // Logged-in users can read the master word list. Only admins/moderators can create/update it.
    // Owner can be disassociated by an admin.
    match /Words/{wordId} {
      allow read: if isUserAuthenticated();
      allow create, update: if userIsAdminOrModerator();
      allow delete: if userIsAdmin();
    }

    // Logged-in users can read the rejected words list. Only admins/moderators can write to it.
    match /RejectedWords/{wordId} {
      allow read, write: if userIsAdminOrModerator();
    }

    // Users can submit words to the queue. Admins/moderators can read/delete from it.
    match /WordSubmissionsQueue/{submissionId} {
      allow create: if isUserAuthenticated() && request.resource.data.submittedByUID == request.auth.uid;
      allow read, delete: if userIsAdminOrModerator();
    }
    
    // Admins can manage puzzles. All users can read active/expired ones.
    match /DailyPuzzles/{puzzleId} {
      allow read: if isUserAuthenticated();
      allow create, update, delete: if userIsAdmin();
    }
    
    // Circles can be created by any authenticated user.
    // Read is allowed for members or if the circle is public.
    // Update/Delete is only for the circle admin.
    match /Circles/{circleId} {
      allow create: if isUserAuthenticated();
      allow read: if isCircleMember(circleId) || resource.data.isPublic == true;
      allow update: if isCircleAdmin(circleId) || userIsAdmin();
      allow delete: if isCircleAdmin(circleId) || userIsAdmin();
    }

    // Joining/Leaving a circle has specific rules.
    // Read: Only circle members can read the member list.
    // Create: A user can add themselves if they have a valid invite. (Handled by server logic, rule needs to allow self-add).
    // Update: A member can only update their own role if an admin triggers it (server logic). Admins can update roles.
    // Delete: A member can remove themselves, or an admin can remove them.
    match /CircleMembers/{memberId} {
      allow read: if isCircleMember(string(memberId).split('_')[0]);
      allow create: if isUserAuthenticated() && request.auth.uid == request.resource.data.userId; // User can add themselves
      allow update: if isCircleAdmin(request.resource.data.circleId); // Admins can change roles
      allow delete: if isRequestingUser(resource.data.userId) || isCircleAdmin(resource.data.circleId) || userIsAdmin();
    }
    
    // Invites can be created by admins/influencers.
    // Read/Update/Delete is more complex and handled by server logic.
    // Rules here allow read for involved parties and write for creators.
    match /CircleInvites/{inviteId} {
      allow create: if isUserAuthenticated() && isCircleAdminOrInfluencer(request.resource.data.circleId);
      allow read: if isUserAuthenticated() && (
        request.auth.uid == resource.data.inviterUserId || 
        request.auth.uid == resource.data.inviteeUserId
      );
      allow update: if isUserAuthenticated() && ( // User accepting/declining
        request.auth.uid == resource.data.inviteeUserId
      );
      allow delete: if isUserAuthenticated() && ( // Inviter or admin deleting
        request.auth.uid == resource.data.inviterUserId || 
        isCircleAdmin(resource.data.circleId)
      ) || userIsAdmin();
    }
    
    // Scores can be read by circle members. Writes are handled by server functions.
    match /CircleDailyScores/{scoreId} {
      allow read: if isCircleMember(string(scoreId).split('_')[1]);
      allow create, update: if isUserAuthenticated(); // Allow server-side updates from user-triggered actions.
    }
    match /CircleWeeklyScores/{scoreId} {
      allow read: if isCircleMember(string(scoreId).split('_')[1]);
      allow create, update: false; // Assume handled by a backend process
    }
    match /CircleMonthlyScores/{scoreId} {
      allow read: if isCircleMember(string(scoreId).split('_')[1]);
      allow create, update: false; // Assume handled by a backend process
    }
    
    // --- System & Admin Rules ---

    // Notifications: Only the user can read/update/delete their own notifications.
    match /Notifications/{notificationId} {
      allow read, update, delete: if isRequestingUser(resource.data.userId);
      allow create: if isUserAuthenticated(); // Server logic creates these.
    }
    
    // User Suggestions: Users can create. Admins/Mods can update.
    match /UserSuggestions/{suggestionId} {
      allow create: if isUserAuthenticated();
      allow read, update, delete: if userIsAdminOrModerator();
    }
    
    // Word Transfers: Logged in users can interact
    match /WordTransfers/{transferId} {
      allow create: if isUserAuthenticated() && request.auth.uid == request.resource.data.senderUserId;
      allow read: if isUserAuthenticated() && (request.auth.uid == resource.data.senderUserId || request.auth.uid == resource.data.recipientUserId);
      allow update: if isUserAuthenticated() && request.auth.uid == resource.data.recipientUserId;
    }
    
    // Changelog: Anyone can read. Only admins can write.
    match /ChangelogEntries/{entryId} {
      allow read: true;
      allow create, update, delete: if userIsAdmin();
    }

    // Mail Log for Trigger Email Extension
    // Restrict writes to authenticated users (server actions), and no one can read them from client.
    match /mail/{docId} {
        allow read: false;
        allow write: if isUserAuthenticated();
    }

    // System Config: Only admins can read/write.
    match /SystemConfiguration/{docId} {
      allow read, write: if userIsAdmin();
    }
    
    // Audit Logs: Admins/Mods can create and read. No one else.
    match /AdminAuditLogs/{logId} {
      allow create, read: if userIsAdminOrModerator();
    }
  }
}
