
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserProfileOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function getUserRole() {
      return get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isUserAuthenticated() && getUserRole() == 'admin';
    }

    function isModerator() {
        return isUserAuthenticated() && getUserRole() in ['admin', 'moderator'];
    }

    function isCircleMember(circleId) {
      return isUserAuthenticated() && exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
    }
    
    function isCircleAdmin(circleId) {
        return isUserAuthenticated() && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role == 'Admin';
    }

    function isCircleAdminOrInfluencer(circleId) {
        return isUserAuthenticated() && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role in ['Admin', 'Influencer'];
    }

    // Collection Rules
    match /Users/{userId} {
      // Allow user to create their own profile
      allow create: if isUserAuthenticated() && request.auth.uid == userId;
      // Allow any authenticated user to read public profile info
      allow read: if isUserAuthenticated();
      // Allow user to update their own profile (photoURL, hasSeenWelcomeInstructions, etc.)
      allow update: if isUserProfileOwner(userId);
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    match /admin_users/{userId} {
      allow read: if isUserAuthenticated();
      allow write: if isAdmin(); // Only admins can change roles
    }
    
    match /Words/{wordId} {
      allow read: if isUserAuthenticated();
      allow create, update, delete: if isModerator();
    }

    match /RejectedWords/{wordId} {
        allow read: if isUserAuthenticated();
        allow create, update, delete: if isModerator();
    }

    match /WordSubmissionsQueue/{submissionId} {
        allow read: if isModerator();
        allow create: if isUserAuthenticated(); // Any authenticated user can submit
        allow update, delete: if isModerator();
    }

    match /DailyPuzzles/{puzzleId} {
        allow read: if isUserAuthenticated();
        allow create, update, delete: if isAdmin();
    }

    match /Circles/{circleId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated();
      allow update: if isCircleAdmin(circleId);
      allow delete: if isCircleAdmin(circleId);
    }

    match /CircleMembers/{memberId} {
      // Any circle member can read other member data in the same circle
      allow read: if isCircleMember(resource.data.circleId);
      // User can join a circle (create their own member doc)
      allow create: if isUserProfileOwner(request.resource.data.userId);
      // Admins can update roles
      allow update: if isCircleAdmin(request.resource.data.circleId);
      // User can leave a circle (delete their own member doc) OR an admin can remove them
      allow delete: if isUserProfileOwner(resource.data.userId) || isCircleAdmin(resource.data.circleId);
    }
    
    match /CircleInvites/{inviteId} {
        allow read: if isUserAuthenticated() && (request.auth.uid == resource.data.inviterUserId || request.auth.uid == resource.data.inviteeUserId);
        allow create: if isCircleAdminOrInfluencer(request.resource.data.circleId);
        allow update: if isUserAuthenticated() && (request.auth.uid == resource.data.inviteeUserId || isCircleAdmin(resource.data.circleId));
        allow delete: if isCircleAdmin(resource.data.circleId);
    }
    
    // Scores
    match /CircleDailyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow create, update: if isUserAuthenticated();
    }
    match /CircleWeeklyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow create, update: if isUserAuthenticated();
    }
    match /CircleMonthlyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow create, update: if isUserAuthenticated();
    }
    
    // Notifications
    match /Notifications/{notificationId} {
        allow read, update: if isUserProfileOwner(resource.data.userId);
        allow create: if isUserAuthenticated(); // Actions that trigger notifications need this
        allow delete: if isUserProfileOwner(resource.data.userId);
    }
    
    // Word Transfers
    match /WordTransfers/{transferId} {
        allow read: if isUserAuthenticated() && (request.auth.uid == resource.data.senderUserId || request.auth.uid == resource.data.recipientUserId);
        allow create: if isUserProfileOwner(request.resource.data.senderUserId);
        allow update: if isUserProfileOwner(request.resource.data.recipientUserId) || isUserProfileOwner(request.resource.data.senderUserId); // Sender can cancel, recipient can respond
    }
    
    // Changelog
    match /ChangelogEntries/{entryId} {
        allow read: if true; // Publicly readable
        allow create, update, delete: if isAdmin();
    }

    // User Suggestions
    match /UserSuggestions/{suggestionId} {
        allow read: if isModerator();
        allow create: if isUserAuthenticated();
        allow update: if isModerator();
    }

    // Mail
    match /mail/{mailId} {
      allow create: if isUserAuthenticated(); // Server actions and admin panel send email
      allow read, update, delete: if isModerator();
    }

    // System Configuration
    match /SystemConfiguration/{docId} {
      allow read, write: if isAdmin();
    }

    // Admin Audit Logs
    match /AdminAuditLogs/{logId} {
      allow create, read: if isModerator();
    }
  }
}
