
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserProfileOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isUserAdmin(userId) {
      return isUserAuthenticated() && get(/databases/$(database)/documents/admin_users/$(userId)).data.role == 'admin';
    }

    function isUserAdminOrModerator(userId) {
      return isUserAuthenticated() && get(/databases/$(database)/documents/admin_users/$(userId)).data.role in ['admin', 'moderator'];
    }

    // Checks if a user is a member of a specific circle.
    function isCircleMember(circleId, userId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + userId));
    }

    // Checks if a user is an ADMIN of a specific circle.
    function isCircleAdmin(circleId, userId) {
      return isCircleMember(circleId, userId) && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + userId)).data.role == 'Admin';
    }

    // Checks if a user is an ADMIN or INFLUENCER of a specific circle.
    function isCircleAdminOrInfluencer(circleId, userId) {
      return isCircleMember(circleId, userId) && get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + userId)).data.role in ['Admin', 'Influencer'];
    }

    // --- Collection Rules ---

    // Users Collection
    match /Users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated() && request.auth.uid == userId;
      allow update: if isUserProfileOwner(userId) || isUserAdmin(request.auth.uid);
      allow delete: if isUserAdmin(request.auth.uid);
    }
    
    // Admin Users Collection
    match /admin_users/{userId} {
      allow read, write: if isUserAdmin(request.auth.uid);
    }

    // Words (Master Dictionary)
    match /Words/{wordText} {
      allow read: if isUserAuthenticated();
      allow write: if isUserAdminOrModerator(request.auth.uid);
    }
    
    // Rejected Words
    match /RejectedWords/{wordText} {
      allow read: if isUserAuthenticated();
      allow write: if isUserAdminOrModerator(request.auth.uid);
    }
    
    // Word Submissions Queue
    match /WordSubmissionsQueue/{submissionId} {
      allow read: if isUserAdminOrModerator(request.auth.uid) || isUserProfileOwner(resource.data.submittedByUID);
      allow create: if isUserAuthenticated() && request.auth.uid == request.resource.data.submittedByUID;
      allow delete: if isUserAdminOrModerator(request.auth.uid);
    }
    
    // Daily Puzzles
    match /DailyPuzzles/{puzzleId} {
      allow read: if isUserAuthenticated();
      allow write: if isUserAdmin(request.auth.uid);
    }

    // Circles
    match /Circles/{circleId} {
      allow read: if (isUserAuthenticated() && resource.data.isPublic == true) || (isUserAuthenticated() && isCircleMember(circleId, request.auth.uid));
      allow create: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && isCircleAdmin(circleId, request.auth.uid);
      allow delete: if isUserAuthenticated() && isCircleAdmin(circleId, request.auth.uid);
    }

    // Circle Members
    match /CircleMembers/{memberId} {
        allow read: if isUserAuthenticated() && isCircleMember(resource.data.circleId, request.auth.uid);
        allow create: if isUserAuthenticated() && (request.auth.uid == request.resource.data.userId || isCircleAdminOrInfluencer(request.resource.data.circleId, request.auth.uid));
        allow delete: if isUserAuthenticated() && (request.auth.uid == resource.data.userId || isCircleAdmin(resource.data.circleId, request.auth.uid));
        allow update: if isUserAuthenticated() && isCircleAdmin(resource.data.circleId, request.auth.uid);
    }

    // Circle Invites
    match /CircleInvites/{inviteId} {
        allow read: if isUserAuthenticated() && (request.auth.uid == resource.data.inviterUserId || request.auth.uid == resource.data.inviteeUserId);
        allow create: if isUserAuthenticated() && isCircleAdminOrInfluencer(request.resource.data.circleId, request.auth.uid);
        allow update: if isUserAuthenticated() && (request.auth.uid == resource.data.inviteeUserId || isUserAdmin(resource.data.circleId, request.auth.uid));
        allow delete: if isUserAuthenticated() && (request.auth.uid == resource.data.inviterUserId || isCircleAdmin(resource.data.circleId, request.auth.uid));
    }
    
    // Circle Scores
    match /CircleDailyScores/{scoreId} {
        allow read: if isUserAuthenticated() && isCircleMember(resource.data.circleId, request.auth.uid);
        allow write: if isUserAuthenticated();
    }
    match /CircleWeeklyScores/{scoreId} {
        allow read: if isUserAuthenticated() && isCircleMember(resource.data.circleId, request.auth.uid);
        allow write: if isUserAuthenticated();
    }
    match /CircleMonthlyScores/{scoreId} {
        allow read: if isUserAuthenticated() && isCircleMember(resource.data.circleId, request.auth.uid);
        allow write: if isUserAuthenticated();
    }

    // Notifications
    match /Notifications/{notificationId} {
      allow read, update, delete: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isUserAuthenticated();
    }
    
    // Word Transfers
    match /WordTransfers/{transferId} {
        allow read: if isUserAuthenticated() && (request.auth.uid == resource.data.senderUserId || request.auth.uid == resource.data.recipientUserId);
        allow create: if isUserAuthenticated() && request.auth.uid == request.resource.data.senderUserId;
        allow update: if isUserAuthenticated() && request.auth.uid == resource.data.recipientUserId;
    }

    // --- Admin-only Collections ---
    match /SystemConfiguration/{docId} {
      allow read, write: if isUserAdmin(request.auth.uid);
    }
    
    match /UserSuggestions/{suggestionId} {
      allow create: true;
      allow read, update: if isUserAdminOrModerator(request.auth.uid);
    }
    
    match /ChangelogEntries/{entryId} {
      allow read: true;
      allow write: if isUserAdmin(request.auth.uid);
    }
    
    match /AdminAuditLogs/{logId} {
      allow read, create: if isUserAdminOrModerator(request.auth.uid);
    }
    
    match /mail/{docId} {
      allow create: if isUserAuthenticated();
      allow read, update, delete: if false;
    }
  }
}
