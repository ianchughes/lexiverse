
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserProfileOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/admin_users/$(userId)) &&
             get(/databases/$(database)/documents/admin_users/$(userId)).data.role == 'admin';
    }

    function isModeratorOrAdmin(userId) {
      return exists(/databases/$(database)/documents/admin_users/$(userId)) &&
             get(/databases/$(database)/documents/admin_users/$(userId)).data.role in ['admin', 'moderator'];
    }
    
    function isCircleMember(circleId, userId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + userId));
    }
    
    function isCircleAdmin(circleId, userId) {
       return get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + userId)).data.role == 'Admin';
    }
    
    function isCircleAdminOrInfluencer(circleId, userId) {
      return get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + userId)).data.role in ['Admin', 'Influencer'];
    }

    // --- Core Game Collections ---

    // User Profiles: Users can manage their own profile, admins can manage any.
    match /Users/{userId} {
      allow create: if isUserAuthenticated() && isUserProfileOwner(userId);
      allow read: if isUserAuthenticated(); // Any logged-in user can read another's public profile
      allow update: if isUserAuthenticated() && (isUserProfileOwner(userId) || isAdmin(request.auth.uid));
      allow delete: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }
    
    // Admin Roles: Only other admins can manage these.
    match /admin_users/{userId} {
      allow read, write: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }

    // Daily Puzzles: Users can read, admins/mods can write.
    match /DailyPuzzles/{puzzleId} {
      allow read: if isUserAuthenticated();
      allow write: if isUserAuthenticated() && isModeratorOrAdmin(request.auth.uid);
    }

    // Master Words Dictionary: Users can read, admins/mods write. Server actions also write.
    match /Words/{wordId} {
      allow read: if isUserAuthenticated();
      allow write: if isUserAuthenticated() && isModeratorOrAdmin(request.auth.uid);
    }
    
    // Rejected Words: Only admins/mods can access.
    match /RejectedWords/{wordId} {
      allow read, write: if isUserAuthenticated() && isModeratorOrAdmin(request.auth.uid);
    }
    
    // Word Submission Queue: Users create for themselves, mods/admins manage.
    match /WordSubmissionsQueue/{submissionId} {
        allow create: if isUserAuthenticated() && request.resource.data.submittedByUID == request.auth.uid;
        allow read, write: if isUserAuthenticated() && isModeratorOrAdmin(request.auth.uid);
    }

    // --- Circles Feature Collections ---

    // Circles: Public circles are readable by any user, private only by members.
    match /Circles/{circleId} {
      allow read: if isUserAuthenticated() && (resource.data.isPublic == true || isCircleMember(circleId, request.auth.uid));
      allow create: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isCircleAdmin(circleId, request.auth.uid));
      allow delete: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isCircleAdmin(circleId, request.auth.uid));
    }
    
    // Circle Members: Members of a circle can see each other.
    match /CircleMembers/{memberId} {
      allow read: if isUserAuthenticated() && isCircleMember(resource.data.circleId, request.auth.uid);
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isCircleAdmin(request.resource.data.circleId, request.auth.uid));
      allow delete: if isUserAuthenticated() && (
        request.resource.data.userId == request.auth.uid || 
        isCircleAdmin(resource.data.circleId, request.auth.uid) || 
        isAdmin(request.auth.uid)
      );
    }
    
    // Circle Invites: Only invitee or circle admin can read/manage.
    match /CircleInvites/{inviteId} {
        allow read: if isUserAuthenticated() && (request.auth.uid == resource.data.inviteeUserId || isCircleAdmin(resource.data.circleId, request.auth.uid));
        allow create: if isUserAuthenticated() && isCircleAdminOrInfluencer(request.resource.data.circleId, request.auth.uid);
        allow update: if isUserAuthenticated() && (request.auth.uid == resource.data.inviteeUserId || isCircleAdmin(resource.data.circleId, request.auth.uid));
        allow delete: if isUserAuthenticated() && (isCircleAdmin(resource.data.circleId, request.auth.uid) || request.auth.uid == resource.data.inviterUserId);
    }
    
    // Circle Scores: Only circle members can read scores. No direct client writes.
    match /CircleDailyScores/{scoreId} {
      allow read: if isUserAuthenticated() && isCircleMember(resource.data.circleId, request.auth.uid);
      allow write: if false;
    }
    match /CircleWeeklyScores/{scoreId} {
      allow read: if isUserAuthenticated() && isCircleMember(resource.data.circleId, request.auth.uid);
      allow write: if false;
    }
     match /CircleMonthlyScores/{scoreId} {
      allow read: if isUserAuthenticated() && isCircleMember(resource.data.circleId, request.auth.uid);
      allow write: if false;
    }

    // --- App Logic & Admin Collections ---

    // System Configuration: Admins only.
    match /SystemConfiguration/{docId} {
      allow read, write: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }

    // Admin Audit Logs: Admins/mods only.
    match /AdminAuditLogs/{logId} {
      allow create, read: if isUserAuthenticated() && isModeratorOrAdmin(request.auth.uid);
    }

    // User Suggestions: Any logged-in user can create, mods/admins manage.
    match /UserSuggestions/{suggestionId} {
      allow create: if isUserAuthenticated();
      allow read, update: if isUserAuthenticated() && isModeratorOrAdmin(request.auth.uid);
    }

    // Changelog Management: Publicly readable, admin writable.
    match /ChangelogEntries/{entryId} {
      allow read: true;
      allow create, update, delete: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }

    // Email trigger collection (write-only for users).
    match /mail/{emailId} {
      allow create: if isUserAuthenticated();
      allow read, update, delete: if false;
    }
    
    // Notifications: Users manage their own. System creates.
    match /Notifications/{notificationId} {
      allow read, update, delete: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isUserAuthenticated(); // Created by server actions on behalf of a user
    }
    
    // Word Transfers: Only involved parties can read.
    match /WordTransfers/{transferId} {
      allow read: if isUserAuthenticated() && (request.auth.uid == resource.data.senderUserId || request.auth.uid == resource.data.recipientUserId);
      allow create: if false;
      allow update: if isUserAuthenticated() && request.auth.uid == resource.data.recipientUserId;
    }

  }
}
