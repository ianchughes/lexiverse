
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // isAdmin() is now the single source of truth for full admin access.
    function isAdmin() {
      // Use get() instead of exists() for direct role check, which is more efficient if the doc is expected to exist for admins.
      // Gracefully handle cases where the document might not exist.
      let adminDoc = get(/databases/$(database)/documents/admin_users/$(request.auth.uid));
      return request.auth != null && adminDoc.data.role == 'admin';
    }

    function isModeratorOrAdmin() {
      if (request.auth == null) { return false; }
      // This function now correctly reads from the admin_users collection without circular dependencies.
      let userRoleDoc = get(/databases/$(database)/documents/admin_users/$(request.auth.uid));
      return userRoleDoc.data.role == 'admin' || userRoleDoc.data.role == 'moderator';
    }

    function isCircleMember(circleId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
    }
    
    function isCircleAdmin(circleId) {
      let memberDoc = get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)) && memberDoc.data.role == 'Admin';
    }

    function isCircleAdminOrInfluencer(circleId) {
      let memberDoc = get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
       return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)) && (memberDoc.data.role == 'Admin' || memberDoc.data.role == 'Influencer');
    }

    // --- Global Admin Rule ---
    // This rule grants admins god-mode access to all documents.
    // It is implicitly checked before any other rule. If this is true, access is granted.
    match /{path=**} {
      allow read, write: if isAdmin();
    }
    
    // --- User Profiles ---
    match /Users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && 
                      request.resource.data.username == resource.data.username && // Disallow username change via this rule
                      request.resource.data.email == resource.data.email &&
                      request.resource.data.overallPersistentScore == resource.data.overallPersistentScore &&
                      request.resource.data.wotdStreakCount == resource.data.wotdStreakCount &&
                      request.resource.data.accountStatus == resource.data.accountStatus &&
                      request.resource.data.dateCreated == resource.data.dateCreated;
      allow delete: if false; // Deletion should be handled by a secure admin function
    }

    // --- Admin Roles ---
    match /admin_users/{userId} {
      // Allow a user to read their own role. This breaks the circular dependency for helper functions.
      // Admins can read any role document due to the global admin rule.
      allow read: if isOwner(userId);
      // Only Admins can modify roles (via the global admin rule).
      allow write: if false; 
    }

    // --- Daily Puzzles (Game Data) ---
    match /DailyPuzzles/{puzzleId} {
      allow read: if isSignedIn();
      allow write: if false; // Only admins can write, enforced by the global admin rule.
    }

    // --- Master Words Dictionary (Game Data) ---
    match /Words/{wordId} {
      allow read: if isSignedIn();
      // Allow moderators or admins to write new words
      allow write: if isModeratorOrAdmin();
    }
    
    // --- Word Submission Queue ---
    match /WordSubmissionsQueue/{submissionId} {
      allow read: if false; // Handled by server-side logic for admins.
      allow create: if isSignedIn() && request.resource.data.submittedByUID == request.auth.uid;
      allow update, delete: if isModeratorOrAdmin(); // Only admins/mods can process the queue
    }

    // --- Rejected Words List ---
    match /RejectedWords/{wordId} {
      // App logic needs to read this to prevent re-submission of bad words.
      allow read: if isSignedIn();
      // Only admins/mods can add to this list.
      allow write: if isModeratorOrAdmin(); 
    }
    
    // --- System Configuration ---
    match /SystemConfiguration/{docId} {
      allow read: if isSignedIn();
      allow write: if isModeratorOrAdmin();
    }

    // --- Circles ---
    match /Circles/{circleId} {
      // Allow read if user is a member OR if the circle is public
      allow read: if isCircleMember(circleId) || resource.data.isPublic == true;
      allow create: if isSignedIn() && request.resource.data.creatorUserID == request.auth.uid;
      allow update: if isCircleAdmin(circleId); // Only circle admins can update
      allow delete: if isCircleAdmin(circleId); // Only circle admins can delete
    }

    match /CircleMembers/{memberId} {
        // A user can read any member doc of a circle they are also a member of.
        // memberId is circleId_userId
        allow read: if isCircleMember(memberId.split('_')[0]);
        // Only a circle admin can add/remove members (create/delete)
        allow create, delete: if isCircleAdmin(memberId.split('_')[0]);
        // Only a circle admin can update roles
        allow update: if isCircleAdmin(memberId.split('_')[0]);
    }
    
    match /CircleInvites/{inviteId} {
        // User can read an invite if they sent it or received it.
        allow read: if (isOwner(resource.data.inviterUserId) || isOwner(resource.data.inviteeUserId));
        allow create: if isSignedIn(); // Handled by server action logic
        // User can update to accept/decline. Admins can manage.
        allow update: if isOwner(resource.data.inviteeUserId) || isCircleAdmin(resource.data.circleId);
        allow delete: if isOwner(resource.data.inviterUserId) || isCircleAdmin(resource.data.circleId);
    }
    
    // Rules for score collections would go here if direct client access is needed,
    // but these are likely updated via server functions.
    match /CircleDailyScores/{scoreId} { allow read, write: if false; }
    match /CircleWeeklyScores/{scoreId} { allow read, write: if false; }
    match /CircleMonthlyScores/{scoreId} { allow read, write: if false; }

    // --- User-Facing Collections ---
    match /Notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId); // User can read/update (mark as read) their own
        allow create, delete: if false; // Created by server, deleted by server/TTL policy
    }
    
    match /UserSuggestions/{suggestionId} {
        allow create: if isSignedIn();
        allow read, write: if false; // Handled by admin panel
    }
    
    match /WordTransfers/{transferId} {
        // Can read a transfer if you are the sender or recipient
        allow read: if isOwner(resource.data.senderUserId) || isOwner(resource.data.recipientUserId);
        // Responding to a transfer (update) is only allowed by the recipient, and only if it's pending.
        allow update: if isOwner(resource.data.recipientUserId) && resource.data.status == 'PendingRecipient';
        allow create, delete: if false; // Transfers are created and managed by server actions.
    }

    match /ChangelogEntries/{entryId} {
        allow read: if true; // Changelog is public
        allow write: if false; // Only admins can write
    }

    match /AdminAuditLogs/{logId} {
      // Only admins/moderators can create logs. No one can edit/delete them.
      allow create: if isModeratorOrAdmin();
      allow read, update, delete: if false;
    }
    
    // --- Mail collection for Trigger Email Extension ---
    match /mail/{docId} {
        // Users can't read mail. Only server-side functions can create mail documents.
        allow read, write: if false;
    }
  }
}
