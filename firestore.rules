
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'admin';
    }

    function isModerator() {
      return isSignedIn() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }

    // Function to check if the requesting user is a member of a given circle
    function isCircleMember(circleId) {
      return isSignedIn() && exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
    }
    
    // Function to check if the requesting user is an ADMIN of a given circle
    function isCircleAdmin(circleId) {
      let memberDoc = get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
      return isCircleMember(circleId) && memberDoc.data.role == 'Admin';
    }
    
    // Function to check if the requesting user is an INFLUENCER or ADMIN of a given circle
    function canInviteToCircle(circleId) {
       let memberDoc = get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
       return isCircleMember(circleId) && memberDoc.data.role in ['Admin', 'Influencer'];
    }

    // --- Collection Rules ---

    // Users can create their own profile upon registration.
    // Users can read any other user's profile (for circle member lists, etc.).
    // Users can only update or delete their own profile.
    match /Users/{userId} {
      allow read: if isSignedIn();
      allow create: if isUser(userId);
      allow update: if isUser(userId);
      allow delete: if isUser(userId) || isAdmin(); // Allow admin to delete user
    }
    
    // Only admins can read/write to the admin_users collection.
    match /admin_users/{userId} {
        allow read, write: if isAdmin();
    }
    
    // Any authenticated user can read the daily puzzles.
    // Only admins can create, update, or delete puzzles.
    match /DailyPuzzles/{puzzleId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Users can create their own word submissions.
    // Only moderators/admins can read/write submissions in the queue.
    match /WordSubmissionsQueue/{submissionId} {
      allow create: if request.auth.uid == request.resource.data.submittedByUID;
      allow read, write: if isModerator();
    }
    
    // Words are readable by any authenticated user.
    // Words can only be written/updated by a moderator/admin.
    match /Words/{wordId} {
      allow read: if isSignedIn();
      allow write: if isModerator();
    }

    // Rejected words are not readable by users to prevent gaming.
    // Only moderators/admins can read/write them.
    match /RejectedWords/{wordId} {
        allow read, write: if isModerator();
    }

    // Circles are readable by any authenticated user (for discovery).
    // Users can only create circles.
    // Updates/Deletes are restricted to Circle Admins or game Admins.
    match /Circles/{circleId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn(); // Creator is validated in server action
        allow update: if isCircleAdmin(circleId) || isAdmin();
        allow delete: if isCircleAdmin(circleId) || isAdmin();
    }

    // Users can create their own membership doc when joining/creating a circle.
    // Any member of a circle can read all other member documents for that circle.
    // Users can only delete their OWN membership doc (leaving).
    // Circle Admins or Game Admins can delete any member doc (removing a user).
    match /CircleMembers/{memberId} {
        allow create: if isUser(request.resource.data.userId);
        allow read: if isSignedIn() && isCircleMember(resource.data.circleId);
        allow update: if isCircleAdmin(resource.data.circleId); // For role changes
        allow delete: if isUser(resource.data.userId) || isCircleAdmin(resource.data.circleId) || isAdmin();
    }
    
    // Invites can be created by a circle admin/influencer.
    // They can be read by the invitee or an admin of the circle.
    // They can be updated by the invitee (responding) or an admin of the circle.
    // They can be deleted by an admin of the circle.
    match /CircleInvites/{inviteId} {
        allow create: if isSignedIn() && canInviteToCircle(request.resource.data.circleId);
        allow read: if isSignedIn() && (request.auth.uid == resource.data.inviteeUserId || isCircleAdmin(resource.data.circleId));
        allow update: if isSignedIn() && (request.auth.uid == resource.data.inviteeUserId || isCircleAdmin(resource.data.circleId) || isAdmin());
        allow delete: if isSignedIn() && (isCircleAdmin(resource.data.circleId) || isAdmin());
    }

    // Score documents can be read by any member of that circle.
    // Writes should only be performed via trusted server-side logic (actions) which check permissions.
    match /CircleDailyScores/{scoreId} {
        allow read: if isSignedIn() && isCircleMember(resource.data.circleId);
        allow write: if isSignedIn() && isCircleMember(request.resource.data.circleId); // User can update scores for their own circles
    }

    // Notifications are private to each user.
    match /Notifications/{notificationId} {
      allow read, write, delete: if isUser(resource.data.userId);
    }
    
    // Word Transfers can be created by the word owner.
    // Read/Update is allowed by either sender or recipient.
    // Delete is not allowed (status is changed instead).
    match /WordTransfers/{transferId} {
      allow create: if isUser(request.resource.data.senderUserId);
      allow read, update: if isSignedIn() && (request.auth.uid == resource.data.senderUserId || request.auth.uid == resource.data.recipientUserId);
    }
    
    // User suggestions are write-only for users, read/write for admins
    match /UserSuggestions/{suggestionId} {
        allow create: if isSignedIn();
        allow read, write: if isModerator();
    }
    
    // Changelog entries are public-readable, but only admin-writable.
    match /ChangelogEntries/{entryId} {
        allow read: true;
        allow write: if isAdmin();
    }
    
    // System Configuration can only be read/written by admins.
    match /SystemConfiguration/{docId} {
      allow read, write: if isAdmin();
    }
    
    // Admin Audit Logs can only be created and read by moderators/admins.
    match /AdminAuditLogs/{logId} {
      allow create: if isModerator();
      allow read: if isModerator();
    }
    
    // The "mail" collection for the Trigger Email extension should be write-only for users.
    match /mail/{docId} {
        allow read: if false; // No one can read emails from the client
        allow write: if isSignedIn(); // Allow any signed-in user to trigger an email
    }
  }
}
