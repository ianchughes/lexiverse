
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role;
    }

    function isModeratorOrAdmin() {
      // Check if the user is signed in and has an admin or moderator role.
      // Important: requires a read rule on admin_users/{userId} for the current user.
      return isSignedIn() && get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }

    function isCircleMember(circleId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid));
    }
    
    function isCircleAdmin(circleId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)) &&
             get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role == 'Admin';
    }

    function isCircleAdminOrInfluencer(circleId) {
      return exists(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)) &&
             get(/databases/$(database)/documents/CircleMembers/$(circleId + '_' + request.auth.uid)).data.role in ['Admin', 'Influencer'];
    }

    // --- User Data ---
    match /Users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Deletions only via server-side admin action
    }

    match /admin_users/{userId} {
      // A user can read their own role doc. An admin can read any role doc.
      allow read: if isOwner(userId) || isModeratorOrAdmin();
      allow write: if isModeratorOrAdmin();
    }

    // --- Game Data ---
    match /DailyPuzzles/{puzzleId} {
      allow read: if true;
      allow write: if isModeratorOrAdmin();
    }
    
    match /SystemConfiguration/{docId} {
      allow read: if true;
      allow write: if isModeratorOrAdmin();
    }

    // --- Words and Submissions ---
    match /Words/{wordId} {
      allow read: if true;
      allow create, update, delete: if isModeratorOrAdmin();
    }
    
    match /WordTransfers/{transferId} {
      allow read: if isSignedIn() && (resource.data.senderUserId == request.auth.uid || resource.data.recipientUserId == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.senderUserId == request.auth.uid;
      // Recipient can only respond if status is pending.
      allow update: if isSignedIn() && resource.data.recipientUserId == request.auth.uid && resource.data.status == 'PendingRecipient';
    }

    match /RejectedWords/{wordId} {
      allow read, write: if isModeratorOrAdmin();
    }

    match /WordSubmissionsQueue/{submissionId} {
      allow read: if isModeratorOrAdmin();
      allow create: if isSignedIn() && request.resource.data.submittedByUID == request.auth.uid;
      allow update, delete: if isModeratorOrAdmin();
    }

    // --- Circles ---
    match /Circles/{circleId} {
      allow read: if resource.data.isPublic == true || isCircleMember(circleId);
      allow create: if isSignedIn();
      allow update: if isCircleAdmin(circleId);
      allow delete: if isCircleAdmin(circleId);
    }

    match /CircleMembers/{memberId} {
      allow read: if isCircleMember(resource.data.circleId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isCircleAdmin(resource.data.circleId) || isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId) || isCircleAdmin(resource.data.circleId);
    }
    
    match /CircleInvites/{inviteId} {
      // User can read invites sent to them or by them. Admins of the circle can read any invite for that circle.
      allow read: if isSignedIn() && (request.auth.uid == resource.data.inviterUserId || request.auth.uid == resource.data.inviteeUserId || isCircleAdmin(resource.data.circleId));
      allow create: if isCircleAdminOrInfluencer(request.resource.data.circleId);
      allow update: if isSignedIn() && request.auth.uid == resource.data.inviteeUserId; // User accepts/declines
      allow delete: if isSignedIn() && (isOwner(resource.data.inviterUserId) || isCircleAdmin(resource.data.circleId)); // Inviter or circle admin can delete
    }

    match /CircleDailyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow create, update, delete: if false; // Scores updated via server-side actions
    }
    match /CircleWeeklyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow create, update, delete: if false;
    }
    match /CircleMonthlyScores/{scoreId} {
        allow read: if isCircleMember(resource.data.circleId);
        allow create, update, delete: if false;
    }
    
    // --- User Feedback & Logging ---
    match /UserSuggestions/{suggestionId} {
      allow create: if true;
      allow read, write: if isModeratorOrAdmin();
    }
    
    match /Notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.userId);
      allow create: if isSignedIn(); // Server-side function creates this
      allow delete: if isOwner(resource.data.userId);
    }
    
    match /AdminAuditLogs/{logId} {
      allow read: if isModeratorOrAdmin();
      allow write: if isModeratorOrAdmin(); // Server-side actions create logs
    }
    
    match /ChangelogEntries/{entryId} {
        allow read: if true;
        allow write: if isModeratorOrAdmin();
    }
    
    match /mail/{docId} {
      allow create: if isSignedIn();
      allow read, update, delete: if false;
    }
  }
}
